<Activity mc:Ignorable="sap sap2010" x:Class="Sequence" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.uipath.com/workflow/activities/ocr" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:sd1="clr-namespace:System.Data;assembly=System.Data" xmlns:swf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uoa="clr-namespace:UiPath.OmniPage.Activities;assembly=UiPath.OmniPage.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="User-defined custom regex pattern" Name="Formula" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Enter Keywords to search for and redact" Name="Keywords" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="If set to True, documents will process without any status reports to screen." Name="Silent" Type="InArgument(x:Boolean)" />
    <x:Property sap2010:Annotation.AnnotationText="An array of pre-built regex patterns:&#xA;{&quot;ssn&quot;,&quot;ein&quot;,&quot;dates&quot;,&quot;currency&quot;,&quot;email&quot;,&quot;phone&quot;}" Name="FormulaAuto" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="OCR Engine to use.  Existing options are &#xA;'OmniPage', &#xA;'Google', &#xA;'UiPath'" Name="OCREngine" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="API Key for the OCR Engine" Name="OCRAPIKey" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Endpoint URL for the OCR Engine" Name="OCREndpoint" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Input PDF File" Name="InputFile" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Folder having a collection of PNGs, JPEGs, or TIFFs  used as input into the redaction activity.  Results will be saved with the same file names to the folder specified in the FolderImageOutput arguments" Name="InputFolder" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Output Folder when processing a collection of images specified by the InputFolder argument" Name="OutputFolder" Type="InOutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Redacted result image filename" Name="OutputFile" Type="InOutArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Color of the redaction annotation.   &#xA;Choose one of the following.  Black is Default&#xA;red&#xA;blue&#xA;black&#xA;white&#xA;gray&#xA;green&#xA;orange" Name="RedactColor" Type="InArgument(sd:Color)" />
    <x:Property sap2010:Annotation.AnnotationText="Enter one of these options: &#xA;&quot;redact&quot;, &#xA;&quot;highlight&quot;" Name="HightlightOnly" Type="InArgument(x:Boolean)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:Annotation.AnnotationText>UPTF00000180eyI8SGVscExpbms+a19fQmFja2luZ0ZpZWxkIjoiaHR0cHM6XC9cL2ZvcnVtLnVpcGF0aC5jb21cL3RcL3BkZi1yZWRhY3Rpb24tY3VzdG9tLWFjdGl2aXR5XC8yMzY4NDYiLCI8SW5pdGlhbFRvb2x0aXA+a19fQmFja2luZ0ZpZWxkIjoiVGhpcyBhY3Rpdml0eSByZWRhY3RzIFBERiBEb2N1bWVudHMgd2l0aG91dCB0aGUgdXNlIG9mIEFkb2JlIEFjcm9iYXQgcmVhZGVyLCBvciBhbnkgb3RoZXIgdGhpcmQgcGFydHkgZGVza3RvcCBzb2Z0d2FyZS4gIiwiPFZlcnNpb24+a19fQmFja2luZ0ZpZWxkIjoxfQ==</sap2010:Annotation.AnnotationText>
  <sap:VirtualizedContainerService.HintSize>1488,711</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Sequence_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="94">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Forms.Layout</x:String>
      <x:String>UiPath.Vision.OCR</x:String>
      <x:String>UiPath.OCR.Contracts</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json.Serialization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Windows.Forms.Automation</x:String>
      <x:String>PdfSharp</x:String>
      <x:String>PdfSharp.Internal</x:String>
      <x:String>PdfSharp.Pdf</x:String>
      <x:String>PdfSharp.Pdf.IO</x:String>
      <x:String>System.Resources.Extensions</x:String>
      <x:String>BitMiracle.LibTiff.Classic</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.OmniPage.Activities</x:String>
      <x:String>UiPath.OCR.Contracts.Activities</x:String>
      <x:String>UiPath.OCR.Activities</x:String>
      <x:String>UiPath.Core.Activities.OCR.Engines</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="37">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Contracts</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>PdfSharp</AssemblyReference>
      <AssemblyReference>PDFSharp.Extensions</AssemblyReference>
      <AssemblyReference>System.Resources.Extensions</AssemblyReference>
      <AssemblyReference>BitMiracle.LibTiff.NET</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Flowchart sap2010:Annotation.AnnotationText="This activity redacts PDF Documents without the use of Adobe Acrobat reader, or any other third party desktop software. " sap:VirtualizedContainerService.HintSize="1226,646" sap2010:WorkflowViewState.IdRef="Flowchart_2">
    <Flowchart.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
      <Variable x:TypeArguments="x:String" Default="[path.Combine(path.GetTempPath,&quot;redaction&quot;)]" Name="pathTemp" />
      <Variable x:TypeArguments="s:String[]" Name="files" />
      <Variable x:TypeArguments="x:Int32" Name="r" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[new list(Of string)]" Name="OutputFiles" />
      <Variable x:TypeArguments="ui:Image" Name="imgin" />
      <Variable x:TypeArguments="x:Double" Name="percent" />
      <Variable x:TypeArguments="x:String" Name="txt" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;left&quot;,&quot;bottom&quot;}]" Name="statuslocation" />
      <Variable x:TypeArguments="swf:Form" Name="ifrm" />
      <Variable x:TypeArguments="swf:Form" Name="Frm" />
      <Variable x:TypeArguments="x:Int32" Name="PageCount" />
      <Variable x:TypeArguments="x:String" Name="rootname" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;cyan&quot;,&quot;black&quot;}]" Name="statusColor" />
      <Variable x:TypeArguments="x:String" Name="msg" />
      <Variable x:TypeArguments="x:String" Name="tmp" />
      <Variable x:TypeArguments="x:Int32" Name="nfiles" />
      <Variable x:TypeArguments="x:Boolean" Name="boolOK" />
      <Variable x:TypeArguments="x:String" Name="FileIMGOut" />
      <Variable x:TypeArguments="x:String" Name="method" />
    </Flowchart.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <av:Point x:Key="ShapeLocation">10,92.5</av:Point>
        <av:Size x:Key="ShapeSize">60,75</av:Size>
        <x:Double x:Key="Width">1192</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">70,130 100,130 100,142 660,142</av:PointCollection>
        <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Flowchart.StartNode>
      <x:Reference>__ReferenceID6</x:Reference>
    </Flowchart.StartNode>
    <FlowStep x:Name="__ReferenceID6">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">660,97</av:Point>
          <av:Size x:Key="ShapeSize">200,90</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">760,187 760,213</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="Validate Input Parameters" sap:VirtualizedContainerService.HintSize="200,90" sap2010:WorkflowViewState.IdRef="Sequence_47">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim exts As String() = {&quot;.jpeg&quot;,&quot;jpg&quot;,&quot;.png&quot;,&quot;.tif&quot;,&quot;.tiff&quot;}&#xA;Dim engines As String() = {&quot;omnipath&quot;,&quot;google&quot;,&quot;uipath&quot;}&#xA;&#xA;Dim ext As String&#xA;&#xA;If highlightOnly Then method = &quot;Hightlight&quot; Else method = &quot;Redact&quot;&#xA;&#xA;If Not IsNothing(FileInput) AndAlso system.io.File.Exists(FileInput) = False Then&#xA;&#x9;console.WriteLine(&quot;The input file was not found: &quot;+FileInput)&#xA;&#x9;'status = &quot;The input file was not found: &quot;+FileInput&#xA;&#x9;Return&#xA;End If&#xA;&#xA;&#xA;'If neither FileInput nor FolderInput were provided, RETURN&#xA;If IsNothing(FileInput) Then&#xA;&#x9;If IsNothing(FolderInput) Then&#xA;&#x9;&#x9;console.WriteLine(&quot;Either an Input File or Input Folder is required as an argument&quot;)&#xA;&#x9;&#x9;Return&#xA;&#x9;&#x9;'Output Folder required&#xA;&#x9;&#x9;If IsNothing(FolderOutput) Then&#xA;&#x9;&#x9;&#x9;console.WriteLine(&quot;An Output Image Folder is required when an Input Image Folder is provided: FOLDEROUTPUT&quot;)&#xA;&#x9;&#x9;&#x9;'status = &quot;An Output Image Folder is required when an Input Image Folder is provided, FOLDEROUTPUT&quot;&#xA;&#x9;&#x9;&#x9;Return&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;'Output Folder must be a fully rooted path&#xA;&#x9;&#x9;If Not system.io.Path.IsPathRooted(FolderOutput) Then&#xA;&#x9;&#x9;&#x9;console.WriteLine(&quot;Please provide a fully qualified / rooted path for the parameter: FOLDEROUTPUT&quot;)&#xA;&#x9;&#x9;&#x9;'status = &quot;Please provide a fully qualified / rooted path for the parameter: FOLDEROUTPUT&quot;&#xA;&#x9;&#x9;&#x9;Return&#xA;&#x9;&#x9;End If&#xA;&#x9;End If&#xA;Else If system.io.File.Exists(FileInput) Then&#xA;&#x9;ext = system.io.path.GetExtension(FileInput).ToLower&#xA;&#x9;rootname = system.IO.path.GetFileName(fileinput)&#xA;&#x9;If exts.Contains(ext) Then&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;'Output File required&#xA;&#x9;&#x9;If IsNothing(FileOutput) Then&#xA;&#x9;&#x9;&#x9;console.WriteLine(&quot;Please provide an output file name for the parameter: FILEOUTPUT: &quot;)&#xA;&#x9;&#x9;&#x9;'status = &quot;Please provide an output file name for the parameter: FILEOUTPUT: &quot;&#xA;&#x9;&#x9;&#x9;Return&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;'Output File must be a fully rooted path&#xA;&#x9;&#x9;If Not system.io.Path.IsPathRooted(FileOutput) Then&#xA;&#x9;&#x9;&#x9;console.WriteLine(&quot;Please provide a fully rooted output filename for the parameter: FILEOUTPUT&quot;)&#xA;&#x9;&#x9;&#x9;'status = &quot;Please provide a fully rooted output filename for the parameter: FILEOUTPUT&quot;&#xA;&#x9;&#x9;&#x9;Return&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;'FileInput cannot be the same as file output&#xA;&#x9;&#x9;If fileoutput = fileinput Then&#xA;&#x9;&#x9;&#x9;console.WriteLine(&quot;The output filename cannot be the same as the input filename: FILEOUTPUT&quot;)&#xA;&#x9;&#x9;&#x9;'status = &quot;The output filename cannot be the same as the input filename: FILEOUTPUT&quot;&#xA;&#x9;&#x9;&#x9;Return&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;FolderOutput = system.io.Path.GetDirectoryName(fileoutput)&#xA;&#x9;&#x9;'Create Output Directory if it does not exist&#xA;&#x9;&#x9;If Not system.io.Directory.Exists(FolderOutput) Then &#xA;&#x9;&#x9;&#x9;system.io.Directory.CreateDirectory(FolderOutput)&#xA;&#x9;&#x9;&#x9;If Not silent Then console.WriteLine(&quot;Created directory: &quot;+FolderOutput)&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;boolOK = True&#xA;&#x9;&#x9;If Not silent Then &#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;Input File: &quot; + rootname)&#xA;&#x9;&#x9;&#x9;'console.WriteLine(&quot;Ouput File: &quot; + system.io.path.GetFileName(FileOutput))&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;Return&#xA;&#x9;Else&#xA;&#x9;&#x9;console.WriteLine(&quot;Unsupported File Type: &quot; + ext.ToUpper +&quot;;  Please provide an image file&quot;)&#xA;&#x9;&#x9;'status = &quot;Unsupported File Type: &quot; + ext.ToUpper +&quot;;  Please provide an image file&quot;&#xA;&#x9;&#x9;Return&#xA;&#x9;End If&#xA;End If&#xA;&#xA;'Output Folder must be a fully rooted path&#xA;If IsNothing(FolderOutput) Then&#xA;&#x9;console.WriteLine(&quot;An Output Image Folder is required when an Input Image Folder is provided: FOLDEROUTPUT&quot;)&#xA;&#x9;'status = &quot;An Output Image Folder is required when an Input Image Folder is provided: FOLDEROUTPUT&quot;&#xA;&#x9;Return&#xA;End If&#xA;If Not system.io.Path.IsPathRooted(FolderOutput) Then&#xA;&#x9;console.WriteLine(&quot;Please provide a fully qualified / rooted path for the parameter: FOLDEROUTPUT&quot;)&#xA;&#x9;'status = &quot;Please provide a fully qualified / rooted path for the parameter: FOLDEROUTPUT&quot;&#xA;&#x9;Return&#xA;End If&#xA;&#xA;'FolderInput cannot be the same as file output&#xA;If folderoutput = folderinput Then&#xA;&#x9;console.WriteLine(&quot;The output Folder cannot be the same as the input folder: FOLDEROUTPUT&quot;)&#xA;&#x9;'status = &quot;The output Folder cannot be the same as the input folder: FOLDEROUTPUT&quot;&#xA;&#x9;Return&#xA;End If&#xA;&#xA;&#xA;&#xA;'Create Output Directory if it does not exist&#xA;If Not system.io.Directory.Exists(FolderOutput) Then &#xA;&#x9;system.io.Directory.CreateDirectory(FolderOutput)&#xA;&#x9;If Not silent Then console.WriteLine(&quot;Created directory: &quot;+FolderOutput)&#xA;End If&#xA;&#xA;'Is FolderInput argument valid, RETURN Files if True&#xA;If system.io.directory.Exists(FolderInput) Then&#xA;&#x9;Dim PNG As String() = Directory.GetFiles(FolderInput,&quot;*.png&quot;)&#xA;&#x9;Dim JPG As String() = Directory.GetFiles(FolderInput,&quot;*.jpg&quot;)&#xA;&#x9;Dim JPEG As String() = Directory.GetFiles(FolderInput,&quot;*.jpeg&quot;)&#xA;&#x9;Dim TIF As String() = Directory.GetFiles(FolderInput,&quot;*.tif&quot;)&#xA;&#x9;Dim TIFF As String() = Directory.GetFiles(FolderInput,&quot;*.tiff&quot;)&#xA;&#x9;Files = PNG.Union(JPG).ToArray&#xA;&#x9;Files = Files.Union(JPEG).ToArray&#xA;&#x9;Files = Files.Union(TIF).ToArray&#xA;&#x9;Files = Files.Union(TIFF).ToArray&#xA;&#x9;nFiles = files.Count&#xA;&#x9;If files.Count = 0 Then &#xA;&#x9;&#x9;console.WriteLine(&quot;Input Image Folder has no images: &quot; +FolderINput)&#xA;&#x9;&#x9;'status = &quot;Input Image Folder has no images: &quot; +FolderINput&#xA;&#x9;&#x9;Return&#xA;&#x9;End If&#xA;&#x9;If Not silent Then &#xA;&#x9;&#x9;boolOK = True&#xA;&#x9;&#x9;'console.WriteLine(&quot;Input Folder: &quot; + FolderInput)&#xA;&#x9;&#x9;'console.WriteLine(&quot;Output Folder: &quot; + FolderOutput)&#xA;&#x9;End If&#xA;&#x9;Return&#xA;Else&#xA;&#x9;console.WriteLine(&quot;Input Image Folder Path does not exist: &quot; + FolderInput)&#xA;&#x9;'status = &quot;Input Image Folder Path does not exist: &quot; + FolderInput&#xA;&#x9;Return&#xA;End If&#xA;&#xA;console.WriteLine(&quot;Invalid Input Parameters.  Please provide a valid PDF, Image, or Folder of Images as an input argument.&quot;)&#xA;&#xA;'Ensure OCR Engine is defined&#xA;If IsNothing(engine) Or Not engines.Contains(engine) Then engine = &quot;omnipage&quot;&#xA;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_18">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="FileInput">[InputFile]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="FolderInput">[InputFolder]</InArgument>
            <InArgument x:TypeArguments="x:String" x:Key="FolderOutput">[OutputFolder]</InArgument>
            <OutArgument x:TypeArguments="s:String[]" x:Key="Files">[Files]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Rootname">[rootname]</OutArgument>
            <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
            <OutArgument x:TypeArguments="x:Int32" x:Key="nFiles">[nfiles]</OutArgument>
            <OutArgument x:TypeArguments="x:Boolean" x:Key="boolOK">[boolOK]</OutArgument>
            <InArgument x:TypeArguments="x:String" x:Key="FileOutput">[OutputFile]</InArgument>
            <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HightlightOnly]</InArgument>
            <InOutArgument x:TypeArguments="x:String" x:Key="engine">[OCREngine]</InOutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="method">[method]</OutArgument>
          </ui:InvokeCode.Arguments>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:InvokeCode>
      </Sequence>
      <FlowStep.Next>
        <FlowDecision x:Name="__ReferenceID4" Condition="[boolOK]" DisplayName="Flow Decision" sap:VirtualizedContainerService.HintSize="79,87" sap2010:WorkflowViewState.IdRef="FlowDecision_9">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <av:Point x:Key="ShapeLocation">720.5,213</av:Point>
              <av:Size x:Key="ShapeSize">79,87</av:Size>
              <av:PointCollection x:Key="FalseConnector">799.5,256.5 829.5,256.5 829.5,261.5 969.5,261.5</av:PointCollection>
              <av:PointCollection x:Key="TrueConnector">720.5,256.5 690.5,256.5 690.5,261.5 550.5,261.5</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <FlowDecision.True>
            <FlowStep x:Name="__ReferenceID0">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">350.5,231</av:Point>
                  <av:Size x:Key="ShapeSize">200,61</av:Size>
                  <av:PointCollection x:Key="ConnectorLocation">450.5,292 450.5,332</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="If isnothing(formula) Then formula = &quot;&quot;&#xD;&#xA;Dim dummy As String = &quot;cr42guyt2nabcdefghij424klmnopqrs986d&quot;&#xD;&#xA;If isnothing(keywords) Then keywords = {dummy}&#xD;&#xA;Dim kwords As String = &quot;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;If isnothing(formulaAuto) Then formulaauto = {}&#xD;&#xA;&#xD;&#xA;Dim lst As list(Of String) = New list(Of String)&#xD;&#xA;Dim kst As list(Of String) = New list(Of String)&#xD;&#xA;Dim pattern As String = &quot;&quot;&#xD;&#xA;Dim fmlauto As String = &quot;&quot;&#xD;&#xA;&#xD;&#xA;Dim i As  Integer = 0&#xD;&#xA;If keywords.Length &gt; 0 Then&#xD;&#xA;&#x9;'Trim spaces between keywords&#xD;&#xA;&#x9;For Each f As String In keywords&#xD;&#xA;&#x9;&#x9;If f.Trim.Length &gt; 0 Then&#x9;kst.Add(f.trim)&#xD;&#xA;&#x9;&#x9;'console.WriteLine(keywords(i).Length.ToString)&#xD;&#xA;&#x9;&#x9;i = i+ 1&#xD;&#xA;&#x9;Next&#xD;&#xA;&#x9;'Join Keywords into on | delimited string&#xD;&#xA;&#x9;If kst.Count &gt; 0 Then kwords = Join(kst.ToArray,&quot;|&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;'Add Keywords to list of regex&#xD;&#xA;&#x9;If kwords.Length &gt; 0 Then  lst.Add(&quot;(?i)(&quot;+kwords+&quot;)&quot;)&#xD;&#xA;End If&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;'If kwords.Length &gt; 0 Then&#xD;&#xA;&#xD;&#xA;'Add Auto Formulas&#xD;&#xA;For Each f As String In formulaAuto&#xD;&#xA;&#x9;f = f.ToLower&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Select Case f&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;ssn&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{3}-\d{2}-\d{4}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;ein&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{2}-\d{7}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;dates&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;((\d{1,2}[/-]\d{1,2}[/-]\d{4})|(\d{4}[/-]\d{1,2}[/-]\d{1,2}))&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;((?&lt;=\s)(?:(?:(?:(?:0?[13578]|1[02])(?&lt;first&gt;\/|-|\.)31)\k&lt;first&gt;|(?:(?:0?[13-9]|1[0-2])(?&lt;second&gt;\/|-|\.)(?:29|30)\k&lt;second&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(?&lt;third&gt;\/|-|\.)29\k&lt;third&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(?&lt;fourth&gt;\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\k&lt;fourth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:(?:(?:January|March|May|July|August|October|December)(?&lt;fifth&gt;\/|-|\s)31)\k&lt;fifth&gt;|(?:(?:January|March|April|May|June|July|August|September|October|November|December)(?&lt;sixth&gt;\/|-|\s)(?:29|30)\k&lt;sixth&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:February(?&lt;seventh&gt;\/|-|\s)29\k&lt;seventh&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:January|February|March|April|May|June|July|August|September|October|November|December)(?&lt;eighth&gt;\/|-|\s)(?:0?[1-9]|1\d|2[0-8])\k&lt;eighth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2}))|(\d{4}[\-\/\.]?((((0[13578])|(1[02]))[\-\/\.]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\.]?(([0-2][0-9])|(30)))|(02[\-\/\.]?[0-2][0-9])))|(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})(,)?(\/|-|\s?)(\d{4})|(\d{4})(\/|-|\s)(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})|\d{2}[\-\/\.]\d{2}[\-\/\.]\d{4})&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;currency&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;([\$円][+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?\s*)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\$\s?-?0*(?:\d+(?!,)(?:\.\d{1,2})?|(?:\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;email&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;phone&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;(\([0-9]{3}\)|[0-9]{3}-)\s{0,1}[0-9]{3}-[0-9]{4}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case Else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;&quot;&#xD;&#xA;&#x9;End Select &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;If pattern.Length &gt; 0 Then lst.Add(&quot;(&quot;+pattern+&quot;)&quot;)&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;'Add Custom Formulas&#xD;&#xA;If formula.trim.Length &gt; 0 Then &#x9;lst.Add(&quot;(&quot;+formula+&quot;)&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;If Not silent Then&#xD;&#xA;&#x9;'console.WriteLine(&quot;Keywords: &quot;+kwords)&#xD;&#xA;&#x9;console.WriteLine(&quot;Common: &quot;+Join(formulaAuto,&quot; | &quot;))&#xD;&#xA;&#x9;console.WriteLine(&quot;Custom: &quot;+formula)&#xD;&#xA;If keywords(0) &lt;&gt; dummy Then console.WriteLine(&quot;Keywords: &quot;+ Join(kst.ToArray,&quot; | &quot;)) Else console.WriteLine(&quot;Keywords: &quot;)&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;formula = Join(lst.ToArray,&quot;|&quot;)&#xD;&#xA;&#xD;&#xA;'Apply Regex global options&#xD;&#xA;'Formula = &quot;(?i)&quot;+&quot;(&quot;+Formula+&quot;)&quot;&#xD;&#xA;&#xD;&#xA;'console.WriteLine(formula)&#xD;&#xA;&#xD;&#xA;" DisplayName="Create Formula" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="InvokeCode_19">
                <ui:InvokeCode.Arguments>
                  <InOutArgument x:TypeArguments="x:String" x:Key="formula">[Formula]</InOutArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="keywords">[Keywords]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="formulaAuto">[FormulaAuto]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="fileInput">[InputFile]</InArgument>
                  <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
              <FlowStep.Next>
                <FlowDecision x:Name="__ReferenceID3" Condition="[IsNothing(files)]" DisplayName="Flow Decision" sap:VirtualizedContainerService.HintSize="79,87" sap2010:WorkflowViewState.IdRef="FlowDecision_8">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <av:Point x:Key="ShapeLocation">411,332</av:Point>
                      <av:Size x:Key="ShapeSize">79,87</av:Size>
                      <av:PointCollection x:Key="TrueConnector">411,375.5 381,375.5 381,387.5 211,387.5</av:PointCollection>
                      <av:PointCollection x:Key="FalseConnector">490,375.5 520,375.5 520,380.5 660,380.5</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <FlowDecision.True>
                    <FlowStep x:Name="__ReferenceID2">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">11,342.5</av:Point>
                          <av:Size x:Key="ShapeSize">200,90</av:Size>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Sequence DisplayName="IMG" sap:VirtualizedContainerService.HintSize="669,1845" sap2010:WorkflowViewState.IdRef="Sequence_60">
                        <Sequence.Variables>
                          <Variable x:TypeArguments="x:String" Name="ext" />
                          <Variable x:TypeArguments="ui:Image" Name="imageInput" />
                          <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="words" />
                          <Variable x:TypeArguments="x:String" Name="text" />
                        </Sequence.Variables>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Sequence DisplayName="Notification" sap:VirtualizedContainerService.HintSize="607,623" sap2010:WorkflowViewState.IdRef="Sequence_59">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <Assign sap:VirtualizedContainerService.HintSize="545,70" sap2010:WorkflowViewState.IdRef="Assign_64">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:String">[msg]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:String">[Method+"ing: " + system.io.path.GetFileName(InputFile)]</InArgument>
                            </Assign.Value>
                          </Assign>
                          <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="545,391" sap2010:WorkflowViewState.IdRef="If_28">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <If.Else>
                              <Sequence sap:VirtualizedContainerService.HintSize="400,223" sap2010:WorkflowViewState.IdRef="Sequence_58">
                                <Sequence.Variables>
                                  <Variable x:TypeArguments="x:String" Name="perc" />
                                </Sequence.Variables>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="338,101" sap2010:WorkflowViewState.IdRef="LogMessage_15" Message="[msg]" />
                              </Sequence>
                            </If.Else>
                          </If>
                        </Sequence>
                        <Assign sap:VirtualizedContainerService.HintSize="607,70" sap2010:WorkflowViewState.IdRef="Assign_65">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[FileIMGOut]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[OutputFile]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <ui:LoadImage DisplayName="Load Image" FileName="[InputFile]" sap:VirtualizedContainerService.HintSize="607,69" sap2010:WorkflowViewState.IdRef="LoadImage_3" Image="[imageInput]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:LoadImage>
                        <Assign sap:VirtualizedContainerService.HintSize="607,70" sap2010:WorkflowViewState.IdRef="Assign_66">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:String">[ext]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:String">[path.GetExtension(InputFile).ToLower]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[OCREngine.ToLower]" sap:VirtualizedContainerService.HintSize="607,303" sap2010:WorkflowViewState.IdRef="Switch`1_5">
                          <Switch.Default>
                            <uoa:OmniPageOCR Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" BundleType="Basic" ComputeSkewAngle="False" DisplayName="OmniPage OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="284,89" sap2010:WorkflowViewState.IdRef="OmniPageOCR_4" Image="[ImageInput]" Result="[words]" Text="[text]" />
                          </Switch.Default>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <p:UiPathDocumentOCR Endpoint="{x:Null}" Output="{x:Null}" x:Key="uipath" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" DisplayName="UiPath Document OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="284,89" sap2010:WorkflowViewState.IdRef="UiPathDocumentOCR_4" Image="[imageInput]" Language="auto" Profile="None" Result="[words]" Scale="1" Text="[text]" />
                          <ui:GoogleCloudOCR FilterRegion="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" x:Key="google" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" ExtractWords="False" sap:VirtualizedContainerService.HintSize="284,89" sap2010:WorkflowViewState.IdRef="GoogleCloudOCR_3" Image="[imageInput]" ResizeToApiLimits="False" Result="[words]" Text="[text]" />
                        </Switch>
                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim myBrush As system.Drawing.SolidBrush&#xA;Dim myPen As system.Drawing.Pen&#xA;Dim pb As system.windows.Forms.PictureBox = New system.Windows.Forms.PictureBox()&#xA;Dim rect As system.Drawing.Rectangle&#xA;Dim fontColor As system.Drawing.Color&#xA;Dim thickness As Int32 = 3&#xA;&#xA;If IsNothing(RedactColor) Then RedactColor = system.Drawing.Color.Black&#xA;myBrush =  New SolidBrush(RedactColor)&#xA;myPen = New system.Drawing.Pen(RedactColor, thickness)&#xA;&#xA;'place image in picturebox&#xA;pb.image = imgin&#xA;&#x9;&#xA;'Redact the image&#xA;Try&#xA;&#x9;&#x9;Using g  As system.Drawing.Graphics = system.Drawing.Graphics.FromImage(pb.image) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;For Each item As system.Collections.Generic.KeyValuePair(Of System.Drawing.Rectangle, String) In words&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect = item.Key&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If System.Text.RegularExpressions.regex.IsMatch(item.Value.Trim,formula)   Then If HighlightOnly Then g.DrawRectangle(myPen,rect) Else g.FillRectangle(myBrush, rect)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;End Using&#xA;Catch ex As Exception&#xA;&#x9;console.ForegroundColor = ConsoleColor.Red&#xA;&#x9;console.WriteLine(&quot;Unexpected error: &quot;+ filename + vbCrLf + ex.Message)&#xA;&#x9;console.ForegroundColor = ConsoleColor.White&#xA;&#x9;imgin.Dispose()&#xA;&#x9;Return&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;'Save the image to disk&#xA;Dim TIFFS As String() = {&quot;.tif&quot;,&quot;.tiff&quot;}&#xA;Dim PNGS As String() = {&quot;.png&quot;}&#xA;Dim JPEGS As String() = {&quot;.jpg&quot;,&quot;.jpeg&quot;}&#xA;Try&#xA;&#x9;&#x9;If TIFFS.Contains(ext) Then&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Tiff)&#xA;&#x9;&#x9;&#x9;Else If PNGS.Contains(ext) Then&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Png)&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Jpeg)&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;pb.Image = Nothing&#xA;Catch ex As Exception&#xA;&#x9;&#x9;console.WriteLine(&quot;Can't Save File: &quot; + ex.Message + &quot; &quot; + fileOut)&#xA;&#x9;&#x9;fileOut = Nothing&#xA;Finally&#xA;&#x9;&#x9;'Dispose Image&#xA;&#x9;&#x9;imgin.Dispose()&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="607,174" sap2010:WorkflowViewState.IdRef="InvokeCode_22">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" x:Key="words">[words]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="text">[Text]</InArgument>
                            <InArgument x:TypeArguments="ui:Image" x:Key="imgIn">[imageInput]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="Formula">[Formula]</InArgument>
                            <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                            <InOutArgument x:TypeArguments="x:String" x:Key="fileOut">[FileIMGOut]</InOutArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HightlightOnly]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="ext">[ext]</InArgument>
                            <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="filename">[InputFile]</InArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                        <ui:InvokeCode ContinueOnError="{x:Null}" Code="If Not IsNothing(fileout) Then&#xA;&#x9;If system.io.File.Exists(fileout) Then&#xA;&#x9;&#x9;files.Add(fileOut)&#xA;&#x9;End If&#xA;End If&#xA;&#xA;Try&#xA;imgin.Dispose&#xA;Catch ex As Exception&#xA;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Image / Add to List" sap:VirtualizedContainerService.HintSize="607,174" sap2010:WorkflowViewState.IdRef="InvokeCode_23">
                          <ui:InvokeCode.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="fileout">[FileIMGOut]</InArgument>
                            <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="files">[OutputFiles]</InOutArgument>
                            <OutArgument x:TypeArguments="ui:Image" x:Key="imgin">[imageInput]</OutArgument>
                          </ui:InvokeCode.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeCode>
                      </Sequence>
                    </FlowStep>
                  </FlowDecision.True>
                  <FlowDecision.False>
                    <FlowStep x:Name="__ReferenceID1">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">660,350</av:Point>
                          <av:Size x:Key="ShapeSize">200,61</av:Size>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[r]" DisplayName="For Each Read and Redact" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[files]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="x:String">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                            </ActivityAction.Argument>
                            <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="605,1545" sap2010:WorkflowViewState.IdRef="Sequence_52">
                              <Sequence.Variables>
                                <Variable x:TypeArguments="ui:Image" Name="imageInput" />
                                <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="words" />
                                <Variable x:TypeArguments="x:String" Name="text" />
                                <Variable x:TypeArguments="x:String" Name="FileOutput" />
                                <Variable x:TypeArguments="ui:Image" Name="ImageOutput" />
                                <Variable x:TypeArguments="scg:List(ui:Image)" Name="images" />
                                <Variable x:TypeArguments="sd1:DataTable" Name="DT" />
                                <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="wrds" />
                                <Variable x:TypeArguments="x:String" Name="ext" />
                              </Sequence.Variables>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Sequence DisplayName="Notification" sap:VirtualizedContainerService.HintSize="563,633" sap2010:WorkflowViewState.IdRef="Sequence_50">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <Assign sap:VirtualizedContainerService.HintSize="521,60" sap2010:WorkflowViewState.IdRef="Assign_58">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Double">[(r+1)/files.Count]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <Assign sap:VirtualizedContainerService.HintSize="521,60" sap2010:WorkflowViewState.IdRef="Assign_53">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:String">[msg]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:String" xml:space="preserve">[(Method.Substring(0,1).ToUpper+Method.Substring(1)) +"ing "+ (r+1).ToString +" of " + files.Count.ToString+" images.  ( "+(100*percent).ToString("0")+"% )"]</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="521,341" sap2010:WorkflowViewState.IdRef="If_24">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <If.Else>
                                    <Sequence sap:VirtualizedContainerService.HintSize="376,183" sap2010:WorkflowViewState.IdRef="Sequence_53">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_12" Message="[msg]" />
                                    </Sequence>
                                  </If.Else>
                                </If>
                              </Sequence>
                              <Assign sap:VirtualizedContainerService.HintSize="563,60" sap2010:WorkflowViewState.IdRef="Assign_55">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[FileIMGOut]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[path.Combine(OutputFolder,system.io.Path.GetFileName(Item))]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <ui:LoadImage DisplayName="Load Image" FileName="[item]" sap:VirtualizedContainerService.HintSize="563,51" sap2010:WorkflowViewState.IdRef="LoadImage_2" Image="[imageInput]">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:LoadImage>
                              <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[OCREngine.ToLower]" sap:VirtualizedContainerService.HintSize="563,181" sap2010:WorkflowViewState.IdRef="Switch`1_4">
                                <Switch.Default>
                                  <uoa:OmniPageOCR Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" BundleType="Basic" ComputeSkewAngle="False" DisplayName="OmniPage OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="200,22" sap2010:WorkflowViewState.IdRef="OmniPageOCR_3" Image="[ImageInput]" Result="[words]" Text="[text]" />
                                </Switch.Default>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <p:UiPathDocumentOCR Endpoint="{x:Null}" Output="{x:Null}" x:Key="uipath" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" DisplayName="UiPath Document OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="UiPathDocumentOCR_3" Image="[imageInput]" Language="auto" Profile="None" Result="[words]" Scale="1" Text="[text]" />
                                <ui:MicrosoftAzureComputerVisionOCR FilterRegion="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" x:Key="microsoft" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" Endpoint="[OCREndpoint]" ExtractWords="False" HandwritingRecognition="False" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="MicrosoftAzureComputerVisionOCR_2" Image="[imageInput]" Result="[words]" Text="[text]" />
                                <ui:GoogleCloudOCR FilterRegion="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" x:Key="google" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" ExtractWords="False" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="GoogleCloudOCR_2" Image="[imageInput]" ResizeToApiLimits="False" Result="[words]" Text="[text]" />
                              </Switch>
                              <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim myBrush As system.Drawing.SolidBrush&#xA;Dim myPen As system.Drawing.Pen&#xA;Dim pb As system.windows.Forms.PictureBox = New system.Windows.Forms.PictureBox()&#xA;Dim rect As system.Drawing.Rectangle&#xA;Dim fontColor As system.Drawing.Color&#xA;Dim thickness As Int32 = 3&#xA;&#xA;ext = path.GetExtension(fileimage).ToLower&#xA;&#xA;If IsNothing(RedactColor) Then RedactColor = system.Drawing.Color.Black&#xA;myBrush =  New SolidBrush(RedactColor)&#xA;myPen = New system.Drawing.Pen(RedactColor, thickness)&#xA;&#xA;'place image in picturebox&#xA;pb.image = imgin&#xA;&#x9;&#xA;'Redact the image&#xA;Try&#xA;&#x9;&#x9;Using g  As system.Drawing.Graphics = system.Drawing.Graphics.FromImage(pb.image) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;For Each item As system.Collections.Generic.KeyValuePair(Of System.Drawing.Rectangle, String) In words&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect = item.Key&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If System.Text.RegularExpressions.regex.IsMatch(item.Value.Trim,formula)   Then If HighlightOnly Then g.DrawRectangle(myPen,rect) Else g.FillRectangle(myBrush, rect)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;End Using&#xA;Catch ex As Exception&#xA;&#x9;console.ForegroundColor = ConsoleColor.Red&#xA;&#x9;console.WriteLine(&quot;Unexpected error: &quot;+ filename + vbCrLf + ex.Message)&#xA;&#x9;console.ForegroundColor = ConsoleColor.White&#xA;&#x9;imgin.Dispose()&#xA;&#x9;Return&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;'Save the image to disk&#xA;Dim TIFFS As String() = {&quot;.tif&quot;,&quot;.tiff&quot;}&#xA;Dim PNGS As String() = {&quot;.png&quot;}&#xA;Dim JPEGS As String() = {&quot;.jpg&quot;,&quot;.jpeg&quot;}&#xA;Try&#xA;&#x9;&#x9;If TIFFS.Contains(ext) Then&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Tiff)&#xA;&#x9;&#x9;&#x9;Else If PNGS.Contains(ext) Then&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Png)&#xA;&#x9;&#x9;&#x9;Else&#xA;&#x9;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Jpeg)&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;pb.Image = Nothing&#xA;Catch ex As Exception&#xA;&#x9;&#x9;console.WriteLine(&quot;Can't Save File: &quot; + ex.Message + &quot; &quot; + fileOut)&#xA;&#x9;&#x9;fileOut = Nothing&#xA;Finally&#xA;&#x9;&#x9;'Dispose Image&#xA;&#x9;&#x9;imgin.Dispose()&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="563,164" sap2010:WorkflowViewState.IdRef="InvokeCode_20">
                                <ui:InvokeCode.Arguments>
                                  <InArgument x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" x:Key="words">[words]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="text">[Text]</InArgument>
                                  <InArgument x:TypeArguments="ui:Image" x:Key="imgIn">[imageInput]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="Formula">[Formula]</InArgument>
                                  <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                                  <InOutArgument x:TypeArguments="x:String" x:Key="fileOut">[FileIMGOut]</InOutArgument>
                                  <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HightlightOnly]</InArgument>
                                  <OutArgument x:TypeArguments="x:String" x:Key="ext">[ext]</OutArgument>
                                  <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="filename">[item]</InArgument>
                                  <InArgument x:TypeArguments="x:String" x:Key="FileImage">[item]</InArgument>
                                </ui:InvokeCode.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeCode>
                              <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;Try &#xA;&#x9;If Not IsNothing(fileout) Then&#xA;&#x9;&#x9;If system.io.File.Exists(fileout) Then&#xA;&#x9;&#x9;&#x9;files.Add(fileOut)&#xA;&#x9;&#x9;End If&#xA;&#x9;End If&#xA;Catch ex As Exception&#xA;&#x9;console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;Try&#xA;imgin.Dispose&#xA;Catch ex As Exception&#xA;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Image / Add to List" sap:VirtualizedContainerService.HintSize="563,164" sap2010:WorkflowViewState.IdRef="InvokeCode_21">
                                <ui:InvokeCode.Arguments>
                                  <InArgument x:TypeArguments="x:String" x:Key="fileout">[item]</InArgument>
                                  <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="files">[OutputFiles]</InOutArgument>
                                  <OutArgument x:TypeArguments="ui:Image" x:Key="imgin">[imageInput]</OutArgument>
                                </ui:InvokeCode.Arguments>
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                              </ui:InvokeCode>
                            </Sequence>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                    </FlowStep>
                  </FlowDecision.False>
                </FlowDecision>
              </FlowStep.Next>
            </FlowStep>
          </FlowDecision.True>
          <FlowDecision.False>
            <FlowStep x:Name="__ReferenceID5">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">969.5,231</av:Point>
                  <av:Size x:Key="ShapeSize">200,61</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="200,61" sap2010:WorkflowViewState.IdRef="LogMessage_16" Level="Error" Message="[&quot;Exiting.....&quot;]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </FlowStep>
          </FlowDecision.False>
        </FlowDecision>
      </FlowStep.Next>
    </FlowStep>
    <x:Reference>__ReferenceID0</x:Reference>
    <x:Reference>__ReferenceID1</x:Reference>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <x:Reference>__ReferenceID4</x:Reference>
    <x:Reference>__ReferenceID5</x:Reference>
  </Flowchart>
</Activity>
<Activity mc:Ignorable="sap sap2010" x:Class="Sequence" this:Sequence.RedactColor="[System.Drawing.Color.Black]" this:Sequence.Silent="False" this:Sequence.FormulaAuto="[{&quot;ssn&quot;,&quot;ein&quot;,&quot;dates&quot;,&quot;currency&quot;,&quot;email&quot;,&quot;phone&quot;}]" this:Sequence.OCREngine="omnipage" this:Sequence.HighlightOnly="False" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.uipath.com/workflow/activities/ocr" xmlns:p1="http://schemas.uipath.com/workflow/activities/document-processing-contracts/dom" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:sd1="clr-namespace:System.Data;assembly=System.Data" xmlns:swf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uoa="clr-namespace:UiPath.OmniPage.Activities;assembly=UiPath.OmniPage.Activities" xmlns:upap="clr-namespace:UiPath.PDF.Activities.PDF;assembly=UiPath.PDF.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Input File: Relative Paths are not allowed.  Please provide a fully rooted path to the input file." Name="FileInput" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="User-Defined Custom Regex Patterns to use in the redaction" Name="Formula" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Choose the color for the redaction annotation. &#xA;For example: &#xA;System.Drawing.Color.Black&#xA;System.Drawing.Color.White&#xA;System.Drawing.Color.Blue" Name="RedactColor" Type="InArgument(sd:Color)" />
    <x:Property sap2010:Annotation.AnnotationText="Ouptut PDF File.  Relative Paths are not allowed.  Please provide a fully rooted path to the output file." Name="FileOutput" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="An array of keywords to redact - useful for names of people or company" Name="Keywords" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="If set to True, documents will process without any status reports to screen." Name="Silent" Type="InArgument(x:Boolean)" />
    <x:Property sap2010:Annotation.AnnotationText="Array of prebuilt regex patterns.  Specify which regex patters to apply in the redaction.  Here are the available options.&#xA;{&quot;ssn&quot;,&quot;phone&quot;,&quot;email&quot;,&quot;dates&quot;,&quot;ein&quot;,&quot;phone&quot;,&quot;currency&quot;}" Name="FormulaAuto" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="OCR Engine to use.  Existing options are &#xA;'OmniPage', &#xA;'Google', &#xA;'UiPath'" Name="OCREngine" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="API Key for the OCR Engine" Name="OCRAPIKey" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="Endpoint URL for the OCR Engine" Name="OCREndpoint" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="If set to true, the process highlights words instead of redacts them" Name="HighlightOnly" Type="InArgument(x:Boolean)" />
  </x:Members>
  <this:Sequence.FileInput>
    <InArgument x:TypeArguments="x:String" />
  </this:Sequence.FileInput>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap2010:Annotation.AnnotationText>UPTF00000180eyI8SGVscExpbms+a19fQmFja2luZ0ZpZWxkIjoiaHR0cHM6XC9cL2ZvcnVtLnVpcGF0aC5jb21cL3RcL3BkZi1yZWRhY3Rpb24tY3VzdG9tLWFjdGl2aXR5XC8yMzY4NDYiLCI8SW5pdGlhbFRvb2x0aXA+a19fQmFja2luZ0ZpZWxkIjoiVGhpcyBhY3Rpdml0eSByZWRhY3RzIFBERiBEb2N1bWVudHMgd2l0aG91dCB0aGUgdXNlIG9mIEFkb2JlIEFjcm9iYXQgcmVhZGVyLCBvciBhbnkgb3RoZXIgdGhpcmQgcGFydHkgZGVza3RvcCBzb2Z0d2FyZS4gIiwiPFZlcnNpb24+a19fQmFja2luZ0ZpZWxkIjoxfQ==</sap2010:Annotation.AnnotationText>
  <sap:VirtualizedContainerService.HintSize>950,998</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>Sequence_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="94">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Forms.Layout</x:String>
      <x:String>UiPath.Vision.OCR</x:String>
      <x:String>UiPath.OCR.Contracts</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json.Serialization</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Windows.Forms.Automation</x:String>
      <x:String>PdfSharp</x:String>
      <x:String>PdfSharp.Internal</x:String>
      <x:String>PdfSharp.Pdf</x:String>
      <x:String>PdfSharp.Pdf.IO</x:String>
      <x:String>System.Resources.Extensions</x:String>
      <x:String>BitMiracle.LibTiff.Classic</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>UiPath.OmniPage.Activities</x:String>
      <x:String>UiPath.OCR.Contracts.Activities</x:String>
      <x:String>UiPath.OCR.Activities</x:String>
      <x:String>UiPath.Core.Activities.OCR.Engines</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Dom</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>System.ComponentModel</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="68">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>UiPath.Vision.Core</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Contracts</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>PdfSharp</AssemblyReference>
      <AssemblyReference>PDFSharp.Extensions</AssemblyReference>
      <AssemblyReference>System.Resources.Extensions</AssemblyReference>
      <AssemblyReference>BitMiracle.LibTiff.NET</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Flowchart sap2010:Annotation.AnnotationText="This activity redacts PDF Documents without the use of Adobe Acrobat reader, or any other third party desktop software. " sap:VirtualizedContainerService.HintSize="930,938" sap2010:WorkflowViewState.IdRef="Flowchart_2">
    <Flowchart.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
      <Variable x:TypeArguments="x:String" Default="[path.Combine(path.GetTempPath,&quot;redaction&quot;)]" Name="pathTemp" />
      <Variable x:TypeArguments="s:String[]" Name="files" />
      <Variable x:TypeArguments="x:Int32" Name="r" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[new list(Of string)]" Name="OutputFiles" />
      <Variable x:TypeArguments="x:String" Name="PathWorking">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="PathStripped">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="pathRedacted">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="ui:Image" Name="imgin" />
      <Variable x:TypeArguments="x:Double" Name="percent" />
      <Variable x:TypeArguments="x:String" Name="txt" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;left&quot;,&quot;bottom&quot;}]" Name="statuslocation" />
      <Variable x:TypeArguments="swf:Form" Name="ifrm" />
      <Variable x:TypeArguments="swf:Form" Name="Frm" />
      <Variable x:TypeArguments="x:Int32" Name="PageCount" />
      <Variable x:TypeArguments="x:String" Name="rootname" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;cyan&quot;,&quot;black&quot;}]" Name="statusColor" />
      <Variable x:TypeArguments="x:String" Name="msg" />
      <Variable x:TypeArguments="x:Int32" Default="5" Name="thickness" />
      <Variable x:TypeArguments="x:String" Name="tmp" />
      <Variable x:TypeArguments="x:Int32" Name="nfiles" />
      <Variable x:TypeArguments="x:Boolean" Name="boolOK" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;.png&quot;,&quot;.jpeg&quot;,&quot;.jpg&quot;,&quot;.tif&quot;,&quot;.tiff&quot;,&quot;.gif&quot;}]" Name="FormatsImage" />
      <Variable x:TypeArguments="x:String" Default="N/A" Name="ProcessType" />
      <Variable x:TypeArguments="x:String" Name="ext">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="Method" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="A fully rooted path to an Output Folder when processing a collection of images specified by the FolderInput argument" Name="FolderOutput" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="A fully rooted path to an Input Folder containing a collection of images. You must supply a FolderOutput value if using this option" Name="FolderInput" />
      <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="DEPRECATED.  This parameter is no longer available and will be removed in future releases." Name="Obfuscate" />
      <Variable x:TypeArguments="x:Boolean" sap2010:Annotation.AnnotationText="Boolean Result" Name="Result" />
      <Variable x:TypeArguments="x:String" sap2010:Annotation.AnnotationText="Response such as warnning or errors from the process" Name="Status" />
    </Flowchart.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <av:Point x:Key="ShapeLocation">0,62.5</av:Point>
        <av:Size x:Key="ShapeSize">60,75</av:Size>
        <x:Double x:Key="Width">896</x:Double>
        <x:Double x:Key="Height">902.432</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">60,100 90,100 90,99.5 360,99.5</av:PointCollection>
        <x:Boolean x:Key="IsAnnotationDocked">False</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Flowchart.StartNode>
      <x:Reference>__ReferenceID9</x:Reference>
    </Flowchart.StartNode>
    <FlowStep x:Name="__ReferenceID1">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">10,684</av:Point>
          <av:Size x:Key="ShapeSize">200,51</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">110,736 110,784</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;Try&#xA;&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;Try&#xA;&#x9;system.IO.Directory.Delete(pathStrip,True)&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;Try&#xA;&#x9;system.IO.Directory.Delete(pathWork,True)&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Clear Temporary Files" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_9">
        <ui:InvokeCode.Arguments>
          <InOutArgument x:TypeArguments="swf:Form" x:Key="frm">[Frm]</InOutArgument>
          <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</InArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <FlowStep.Next>
        <FlowStep x:Name="__ReferenceID0">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:Point x:Key="ShapeLocation">10,784</av:Point>
              <av:Size x:Key="ShapeSize">200,51</av:Size>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;&#x9;frm.Close&#xA;&#x9;frm.Dispose&#xA;Catch ex As Exception&#xA;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_16">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="swf:Form" x:Key="frm">[Frm]</InArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
        </FlowStep>
      </FlowStep.Next>
    </FlowStep>
    <x:Reference>__ReferenceID0</x:Reference>
    <FlowStep x:Name="__ReferenceID4">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">360,446</av:Point>
          <av:Size x:Key="ShapeSize">200,66</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">460,512 460,566.5</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="Validate Input Parameters" sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_47">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_79">
          <Assign.To>
            <OutArgument x:TypeArguments="x:Boolean">[Result]</OutArgument>
          </Assign.To>
          <Assign.Value>
            <InArgument x:TypeArguments="x:Boolean">False</InArgument>
          </Assign.Value>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </Assign>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim ext As String&#xA;Dim engines As String() = {&quot;omnipath&quot;,&quot;google&quot;,&quot;uipath&quot;}&#xA;&#xA;status = &quot;N/A&quot;&#xA;&#xA;If highlightOnly Then method = &quot;Hightlight&quot; else method = &quot;Redact&quot;&#xA;&#xA;'If FileInput Not Provided, Return&#xA;If IsNothing(FileInput) Then&#xA;&#x9;console.WriteLine(&quot;File Input Parameter is required&quot;)&#xA;&#x9;status = &quot;File Input Parameter is required&quot;&#xA;&#x9;Return&#xA;Else If Not system.io.file.Exists(FileInput) Then &#xA;&#x9;console.WriteLine(&quot;FileInput was not found: &quot;+fileinput)&#xA;&#x9;status = &quot;FileInput was not found: &quot;+fileinput&#xA;&#x9;Return&#xA;Else If Not system.io.path.GetExtension(FileInput).ToLower = &quot;.pdf&quot; Then&#xA;&#x9;console.WriteLine(&quot;FileInput must be a PDF: &quot;+ system.io.Path.GetFileName(fileinput))&#xA;&#x9;status = &quot;FileInput must be a PDF: &quot;+ system.io.Path.GetFileName(fileinput)&#xA;&#x9;Return&#xA;Else&#xA;&#x9;ext = system.io.path.GetExtension(FileInput).ToLower&#xA;&#x9;rootname = system.IO.path.GetFileName(fileinput)&#xA;End If&#xA;&#xA;'Ensure OCR Engine is defined&#xA;If IsNothing(engine) Then engine = &quot;omnipage&quot;&#xA;&#x9;&#xA;boolOK = True&#xA;&#xA;'Ensure OCR Engine is defined&#xA;If IsNothing(engine) Or Not engines.Contains(engine) Then engine = &quot;omnipage&quot;&#xA;&#xA;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_18">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="FileInput">[FileInput]</InArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Rootname">[rootname]</OutArgument>
            <InOutArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InOutArgument>
            <OutArgument x:TypeArguments="x:Boolean" x:Key="boolOK">[boolOK]</OutArgument>
            <InOutArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HighlightOnly]</InOutArgument>
            <InOutArgument x:TypeArguments="x:String" x:Key="engine">[OCREngine]</InOutArgument>
            <OutArgument x:TypeArguments="x:Boolean" x:Key="result">[Result]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="status">[Status]</OutArgument>
            <OutArgument x:TypeArguments="x:String" x:Key="Method">[Method]</OutArgument>
          </ui:InvokeCode.Arguments>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:InvokeCode>
      </Sequence>
      <FlowStep.Next>
        <FlowDecision x:Name="__ReferenceID2" Condition="[boolOK]" DisplayName="Flow Decision" sap:VirtualizedContainerService.HintSize="79,87" sap2010:WorkflowViewState.IdRef="FlowDecision_8">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <av:Point x:Key="ShapeLocation">420.5,566.5</av:Point>
              <av:Size x:Key="ShapeSize">79,87</av:Size>
              <av:PointCollection x:Key="TrueConnector">420.5,610 210,610</av:PointCollection>
              <av:PointCollection x:Key="FalseConnector">499.5,610 670,610</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <FlowDecision.True>
            <FlowStep x:Name="__ReferenceID8">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">10,584</av:Point>
                  <av:Size x:Key="ShapeSize">200,51</av:Size>
                  <av:PointCollection x:Key="ConnectorLocation">110,636 110,684</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="806,4067" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <TryCatch.Try>
                  <Sequence sap:VirtualizedContainerService.HintSize="768,3840" sap2010:WorkflowViewState.IdRef="Sequence_67">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="If isnothing(formula) Then formula = &quot;&quot;&#xD;&#xA;Dim dummy As String = &quot;zs5l1ia6qy7z0jz1pg7nblrysx4tycf0eis5&quot;&#xD;&#xA;If isnothing(keywords) orelse keywords.Count=0 Then keywords = {dummy}&#xD;&#xA;Dim kwords As String = &quot;&quot;&#xD;&#xA;&#x9;&#xD;&#xA;If isnothing(formulaAuto) Then formulaauto = {}&#xD;&#xA;&#xD;&#xA;Dim lst As list(Of String) = New list(Of String)&#xD;&#xA;Dim kst As list(Of String) = New list(Of String)&#xD;&#xA;Dim pattern As String = &quot;&quot;&#xD;&#xA;Dim fmlauto As String = &quot;&quot;&#xD;&#xA;&#xD;&#xA;Dim i As  Integer = 0&#xD;&#xA;If keywords.Length &gt; 0 Then&#xD;&#xA;&#x9;'Trim spaces between keywords&#xD;&#xA;&#x9;For Each f As String In keywords&#xD;&#xA;&#x9;&#x9;If f.Trim.Length &gt; 0 Then&#x9;kst.Add(f.trim)&#xD;&#xA;&#x9;&#x9;'console.WriteLine(keywords(i).Length.ToString)&#xD;&#xA;&#x9;&#x9;i = i+ 1&#xD;&#xA;&#x9;Next&#xD;&#xA;&#x9;'Join Keywords into on | delimited string&#xD;&#xA;&#x9;If kst.Count &gt; 0 Then kwords = Join(kst.ToArray,&quot;|&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;'Add Keywords to list of regex&#xD;&#xA;&#x9;If kwords.Length &gt; 0 Then  lst.Add(&quot;(?i)(&quot;+kwords+&quot;)&quot;)&#xD;&#xA;End If&#xD;&#xA; &#xD;&#xA;&#xD;&#xA;'If kwords.Length &gt; 0 Then&#xD;&#xA;&#xD;&#xA;'Add Auto Formulas&#xD;&#xA;For Each f As String In formulaAuto&#xD;&#xA;&#x9;f = f.ToLower&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;Select Case f&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;ssn&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{3}-\d{2}-\d{4}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;ein&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{2}-\d{7}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;dates&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;((\d{1,2}[/-]\d{1,2}[/-]\d{4})|(\d{4}[/-]\d{1,2}[/-]\d{1,2}))&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;((?&lt;=\s)(?:(?:(?:(?:0?[13578]|1[02])(?&lt;first&gt;\/|-|\.)31)\k&lt;first&gt;|(?:(?:0?[13-9]|1[0-2])(?&lt;second&gt;\/|-|\.)(?:29|30)\k&lt;second&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(?&lt;third&gt;\/|-|\.)29\k&lt;third&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(?&lt;fourth&gt;\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\k&lt;fourth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:(?:(?:January|March|May|July|August|October|December)(?&lt;fifth&gt;\/|-|\s)31)\k&lt;fifth&gt;|(?:(?:January|March|April|May|June|July|August|September|October|November|December)(?&lt;sixth&gt;\/|-|\s)(?:29|30)\k&lt;sixth&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:February(?&lt;seventh&gt;\/|-|\s)29\k&lt;seventh&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:January|February|March|April|May|June|July|August|September|October|November|December)(?&lt;eighth&gt;\/|-|\s)(?:0?[1-9]|1\d|2[0-8])\k&lt;eighth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2}))|(\d{4}[\-\/\.]?((((0[13578])|(1[02]))[\-\/\.]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\.]?(([0-2][0-9])|(30)))|(02[\-\/\.]?[0-2][0-9])))|(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})(,)?(\/|-|\s?)(\d{4})|(\d{4})(\/|-|\s)(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})|\d{2}[\-\/\.]\d{2}[\-\/\.]\d{4})&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;currency&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;([\$円][+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?\s*)&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\$\s?-?0*(?:\d+(?!,)(?:\.\d{1,2})?|(?:\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;email&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case &quot;phone&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;(\([0-9]{3}\)|[0-9]{3}-)\s{0,1}[0-9]{3}-[0-9]{4}&quot;&#xD;&#xA;&#x9;&#x9;&#x9;Case Else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;&quot;&#xD;&#xA;&#x9;End Select &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;If pattern.Length &gt; 0 Then lst.Add(&quot;(&quot;+pattern+&quot;)&quot;)&#xD;&#xA;Next&#xD;&#xA;&#xD;&#xA;'Add Custom Formulas&#xD;&#xA;If formula.trim.Length &gt; 0 Then &#x9;lst.Add(&quot;(&quot;+formula+&quot;)&quot;)&#xD;&#xA;&#x9;&#xD;&#xA;If Not silent Then&#xD;&#xA;&#x9;'console.WriteLine(&quot;Keywords: &quot;+kwords)&#xD;&#xA;&#x9;console.WriteLine(&quot;Common: &quot;+Join(formulaAuto,&quot; | &quot;))&#xD;&#xA;&#x9;console.WriteLine(&quot;Custom: &quot;+formula)&#xD;&#xA;&#x9;If keywords(0) &lt;&gt; dummy Then console.WriteLine(&quot;Keywords: &quot;+ Join(kst.ToArray,&quot; | &quot;)) Else console.WriteLine(&quot;Keywords: &quot;)&#xD;&#xA;End If&#xD;&#xA;&#xD;&#xA;formula = Join(lst.ToArray,&quot;|&quot;)&#xD;&#xA;&#xD;&#xA;'Apply Regex global options&#xD;&#xA;'Formula = &quot;(?i)&quot;+&quot;(&quot;+Formula+&quot;)&quot;&#xD;&#xA;&#xD;&#xA;'console.WriteLine(formula)&#xD;&#xA;&#xD;&#xA;" DisplayName="Create Formula" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_22">
                      <ui:InvokeCode.Arguments>
                        <InOutArgument x:TypeArguments="x:String" x:Key="formula">[Formula]</InOutArgument>
                        <InArgument x:TypeArguments="s:String[]" x:Key="keywords">[Keywords]</InArgument>
                        <InArgument x:TypeArguments="s:String[]" x:Key="formulaAuto">[FormulaAuto]</InArgument>
                        <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
                      </ui:InvokeCode.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeCode>
                    <upap:GetPDFPageCount DisplayName="Get PDF Page Count" FileName="[FileInput]" sap:VirtualizedContainerService.HintSize="726,51" sap2010:WorkflowViewState.IdRef="GetPDFPageCount_2" PageCount="[PageCount]">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </upap:GetPDFPageCount>
                    <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="726,51" sap2010:WorkflowViewState.IdRef="If_28">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Else>
                        <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_58">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </Sequence>
                      </If.Else>
                    </If>
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#x9;Dim rootPath As String = path.GetDirectoryName(FileInput)&#xA;&#x9;If  IsNothing(fileoutput) Then fileoutput=&quot;&quot; Else fileoutput = fileoutput.Trim&#xA;&#x9;&#x9;Dim FolderOutput As String&#xA;&#x9;&#xA;&#x9;pathStrip = path.Combine(pathTemp+&quot;Stripped\&quot;)&#xA;&#x9;pathWork = path.Combine(pathTemp+&quot;Working\&quot;)&#xA;&#x9;&#xA;&#x9;If path.IsPathRooted(fileoutput) Then &#xA;&#x9;&#x9;pathRedacted = path.Combine(pathTemp+&quot;Redacted\&quot;)&#xA;&#xA;&#x9;Else&#xA;&#x9;&#x9;pathRedacted = path.GetDirectoryName(FileInput)+&quot;\Redacted\&quot;&#xA;&#x9;&#x9;If(fileoutput.Length = 0) Then FileOutput = pathRedacted+&quot;Redacted-&quot;+path.GetFileName(FileInput) Else  FileOutput = pathRedacted+path.GetFileName(fileoutput)&#xA;&#x9;&#x9;&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;'Create Output Directory if it does not exist&#xA;&#x9;FolderOutput = system.io.Path.GetDirectoryName(fileoutput)&#xA;&#x9;If Not system.io.Directory.Exists(FolderOutput) Then &#xA;&#x9;&#x9;system.io.Directory.CreateDirectory(FolderOutput)&#xA;&#x9;&#x9;If Not silent Then console.WriteLine(&quot;Created directory: &quot;+FolderOutput)&#xA;&#x9;End If&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;Try &#xA;&#x9;If System.IO.Directory.Exists(pathtemp) Then system.IO.Directory.Delete(pathTemp,True)&#xA;&#x9;System.Threading.Thread.Sleep(2000)&#xA;&#x9;'If(Not System.IO.Directory.Exists(pathtemp)) Then&#xA;&#x9;    System.IO.Directory.CreateDirectory(pathTemp)&#xA;&#x9;'End If&#xA;&#x9;'If(Not System.IO.Directory.Exists(pathStrip)) Then&#xA;&#x9;&#x9;System.IO.Directory.CreateDirectory(pathStrip)&#xA;&#x9;'End If&#xA;&#x9;'If(Not System.IO.Directory.Exists(pathRedacted)) Then&#xA;&#x9;&#x9;System.IO.Directory.CreateDirectory(pathRedacted)&#xA;&#x9;'End If&#xA;&#x9;'If(Not System.IO.Directory.Exists(pathWork)) Then&#xA;&#x9;&#x9;System.IO.Directory.CreateDirectory(pathWork)&#xA;&#x9;'End If&#xA;Catch ex As Exception&#xA;&#x9;pathStrip = path.Combine(pathTemp + &quot;Stripped-&quot;) + path.GetFileNameWithoutExtension(fileinput)+&quot;\&quot;&#xA;&#x9;If(Not System.IO.Directory.Exists(pathStrip)) Then&#xA;&#x9;&#x9;System.IO.Directory.CreateDirectory(pathStrip)&#xA;&#x9;End If&#xA;&#x9;System.IO.Directory.CreateDirectory(pathRedacted)&#xA;&#x9;System.IO.Directory.CreateDirectory(pathWork)&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#x9;&#xA;" DisplayName="Create Folders" sap:VirtualizedContainerService.HintSize="726,51" sap2010:WorkflowViewState.IdRef="InvokeCode_23">
                      <ui:InvokeCode.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="pathTemp">[pathTemp]</InArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</OutArgument>
                        <OutArgument x:TypeArguments="x:String" x:Key="pathRedacted">[pathRedacted]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="fileinput">[FileInput]</InArgument>
                        <InOutArgument x:TypeArguments="x:String" x:Key="FileOutput">[FileOutput]</InOutArgument>
                        <InArgument x:TypeArguments="x:Boolean" x:Key="silent">[Silent]</InArgument>
                      </ui:InvokeCode.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeCode>
                    <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="726,51" sap2010:WorkflowViewState.IdRef="If_29">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If.Else>
                        <Sequence sap:VirtualizedContainerService.HintSize="200,83" sap2010:WorkflowViewState.IdRef="Sequence_59">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </Sequence>
                      </If.Else>
                    </If>
                    <While DisplayName="PDF to Images" sap:VirtualizedContainerService.HintSize="726,537" sap2010:WorkflowViewState.IdRef="While_6">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <While.Condition>[i&lt;PageCount]</While.Condition>
                      <Sequence sap:VirtualizedContainerService.HintSize="376,379" sap2010:WorkflowViewState.IdRef="Sequence_60">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_68">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Double">[(i/PageCount)]</InArgument>
                          </Assign.Value>
                        </Assign>
                        <upap:ExportPDFPageAsImage DisplayName="Export PDF Page As Image" FileName="[FileInput]" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ExportPDFPageAsImage_6" ImageDpi="300" OutputFileName="[pathStripped+&quot;pdf-&quot;+i.ToString+&quot;.png&quot;]" PageNumber="[i+1]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </upap:ExportPDFPageAsImage>
                        <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_69">
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                          </Assign.Value>
                        </Assign>
                      </Sequence>
                    </While>
                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="files = System.IO.Directory.GetFiles(pathStrip)&#xA;i=0" DisplayName="Grab PNGs" sap:VirtualizedContainerService.HintSize="726,51" sap2010:WorkflowViewState.IdRef="InvokeCode_24">
                      <ui:InvokeCode.Arguments>
                        <OutArgument x:TypeArguments="s:String[]" x:Key="files">[files]</OutArgument>
                        <OutArgument x:TypeArguments="x:Int32" x:Key="i">[i]</OutArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
                      </ui:InvokeCode.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeCode>
                    <If Condition="[not Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="726,268" sap2010:WorkflowViewState.IdRef="If_30">
                      <If.Then>
                        <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_21" Message="[&quot;Using &quot;+ OCREngine.ToUpperInvariant]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:LogMessage>
                      </If.Then>
                    </If>
                    <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[r]" DisplayName="For Each Read and Redact" sap:VirtualizedContainerService.HintSize="726,1515" sap2010:WorkflowViewState.IdRef="ForEach`1_3" Values="[files]">
                      <ui:ForEach.Body>
                        <ActivityAction x:TypeArguments="x:String">
                          <ActivityAction.Argument>
                            <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                          </ActivityAction.Argument>
                          <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="539,1381" sap2010:WorkflowViewState.IdRef="Sequence_64">
                            <Sequence.Variables>
                              <Variable x:TypeArguments="ui:Image" Name="imageInput" />
                              <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="words" />
                              <Variable x:TypeArguments="x:String" Name="text" />
                              <Variable x:TypeArguments="x:String" Name="FileOutput" />
                              <Variable x:TypeArguments="ui:Image" Name="ImageOutput" />
                              <Variable x:TypeArguments="scg:List(ui:Image)" Name="images" />
                              <Variable x:TypeArguments="sd1:DataTable" Name="DT" />
                              <Variable x:TypeArguments="x:String" Name="FileIMG" />
                              <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="wrds" />
                            </Sequence.Variables>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Sequence DisplayName="Notification" sap:VirtualizedContainerService.HintSize="497,343" sap2010:WorkflowViewState.IdRef="Sequence_63">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_75">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">[(r+1)/files.Count]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_76">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[msg]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">[(Method.Substring(0,1).ToUpper+Method.Substring(1))+"ing Page: " + (r+1).ToString + " ( "+(100*percent).ToString("0")+"% )"]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="262,51" sap2010:WorkflowViewState.IdRef="If_31">
                                <sap:WorkflowViewStateService.ViewState>
                                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                    <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                  </scg:Dictionary>
                                </sap:WorkflowViewStateService.ViewState>
                                <If.Else>
                                  <Sequence sap:VirtualizedContainerService.HintSize="376,183" sap2010:WorkflowViewState.IdRef="Sequence_62">
                                    <Sequence.Variables>
                                      <Variable x:TypeArguments="x:String" Name="perc" />
                                    </Sequence.Variables>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_18" Message="[msg]" />
                                  </Sequence>
                                </If.Else>
                              </If>
                            </Sequence>
                            <Assign sap:VirtualizedContainerService.HintSize="497,60" sap2010:WorkflowViewState.IdRef="Assign_77">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[FileIMG]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">[PathWorking+"Redacted-"+r.ToString+".png"]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LoadImage DisplayName="Load Image" FileName="[item]" sap:VirtualizedContainerService.HintSize="497,51" sap2010:WorkflowViewState.IdRef="LoadImage_2" Image="[imageInput]">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:LoadImage>
                            <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[OCREngine.ToLower]" sap:VirtualizedContainerService.HintSize="497,307" sap2010:WorkflowViewState.IdRef="Switch`1_5">
                              <Switch.Default>
                                <uoa:OmniPageOCR Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" BundleType="Basic" ComputeSkewAngle="False" DisplayName="OmniPage OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="OmniPageOCR_3" Image="[ImageInput]" Language="auto" Result="[words]" Text="[text]" />
                              </Switch.Default>
                              <p:UiPathDocumentOCR Endpoint="{x:Null}" Output="{x:Null}" x:Key="uipath" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" DisplayName="UiPath Document OCR" ExtractWords="True" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="UiPathDocumentOCR_3" Image="[imageInput]" Language="auto" Profile="None" Result="[words]" Scale="1" Text="[text]" />
                              <ui:MicrosoftAzureComputerVisionOCR FilterRegion="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" x:Key="microsoft" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" Endpoint="[OCREndpoint]" ExtractWords="False" HandwritingRecognition="False" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="MicrosoftAzureComputerVisionOCR_2" Image="[imageInput]" Result="[words]" Text="[text]" />
                              <ui:GoogleCloudOCR FilterRegion="{x:Null}" Language="{x:Null}" Output="{x:Null}" Profile="{x:Null}" Scale="{x:Null}" x:Key="google" ApiKey="[OCRAPIKey]" ComputeSkewAngle="False" ExtractWords="False" sap:VirtualizedContainerService.HintSize="284,79" sap2010:WorkflowViewState.IdRef="GoogleCloudOCR_2" Image="[imageInput]" ResizeToApiLimits="False" Result="[words]" Text="[text]" />
                            </Switch>
                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim myBrush As system.Drawing.SolidBrush&#xA;Dim myPen As system.Drawing.Pen&#xA;Dim pb As system.windows.Forms.PictureBox = New system.Windows.Forms.PictureBox()&#xA;Dim rect As system.Drawing.Rectangle&#xA;Dim fontColor As system.Drawing.Color&#xA;&#xA;If IsNothing(RedactColor) Then RedactColor = system.Drawing.Color.Black&#xA;myBrush =  New SolidBrush(RedactColor)&#xA;myPen = New system.Drawing.Pen(RedactColor, thickness)&#xA;&#xA;'place image in picturebox&#xA;pb.image = imgin&#xA;&#x9;&#xA;'Redact the image&#xA;Using g  As system.Drawing.Graphics = system.Drawing.Graphics.FromImage(pb.image) &#xA;&#x9;&#x9;&#x9;For Each item As system.Collections.Generic.KeyValuePair(Of System.Drawing.Rectangle, String) In words&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect = item.Key&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If System.Text.RegularExpressions.regex.IsMatch(item.Value.Trim,formula)   Then If HighlightOnly Then g.DrawRectangle(myPen,rect) Else g.FillRectangle(myBrush, rect)&#xA;&#x9;&#x9;&#x9;Next&#xA;End Using&#xA;&#xA;'Save the image to disk&#xA;Try&#xA;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.png)&#xA;&#x9;&#x9;pb.Image = Nothing&#xA;Catch ex As Exception&#xA;&#x9;&#x9;console.WriteLine(&quot;Can't Save File: &quot; + ex.Message + &quot; &quot; + fileOut)&#xA;&#x9;&#x9;fileOut = Nothing&#xA;Finally&#xA;&#x9;&#x9;'Dispose Image&#xA;&#x9;&#x9;imgin.Dispose()&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="497,164" sap2010:WorkflowViewState.IdRef="InvokeCode_25">
                              <ui:InvokeCode.Arguments>
                                <InArgument x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" x:Key="words">[words]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="text">[Text]</InArgument>
                                <InArgument x:TypeArguments="ui:Image" x:Key="imgIn">[imageInput]</InArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="Formula">[Formula]</InArgument>
                                <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                                <InOutArgument x:TypeArguments="x:String" x:Key="fileOut">[FileIMG]</InOutArgument>
                                <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HighlightOnly]</InArgument>
                                <InArgument x:TypeArguments="x:Int32" x:Key="thickness">[thickness]</InArgument>
                              </ui:InvokeCode.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeCode>
                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="If Not IsNothing(fileout) Then&#xA;&#x9;If system.io.File.Exists(fileout) Then&#xA;&#x9;&#x9;files.Add(fileOut)&#xA;&#x9;End If&#xA;End If&#xA;&#xA;Try&#xA;imgin.Dispose&#xA;Catch ex As Exception&#xA;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Image / Add to List" sap:VirtualizedContainerService.HintSize="497,164" sap2010:WorkflowViewState.IdRef="InvokeCode_26">
                              <ui:InvokeCode.Arguments>
                                <InArgument x:TypeArguments="x:String" x:Key="fileout">[FileIMG]</InArgument>
                                <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="files">[OutputFiles]</InOutArgument>
                                <OutArgument x:TypeArguments="ui:Image" x:Key="imgin">[imageInput]</OutArgument>
                              </ui:InvokeCode.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeCode>
                          </Sequence>
                        </ActivityAction>
                      </ui:ForEach.Body>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:ForEach>
                    <Sequence DisplayName="Status" sap:VirtualizedContainerService.HintSize="726,535" sap2010:WorkflowViewState.IdRef="Sequence_66">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <If Condition="[Silent]" DisplayName="Status Update" sap:VirtualizedContainerService.HintSize="521,443" sap2010:WorkflowViewState.IdRef="If_32">
                        <If.Else>
                          <Sequence sap:VirtualizedContainerService.HintSize="376,283" sap2010:WorkflowViewState.IdRef="Sequence_65">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_78">
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:String">[msg]</OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:String">["Saving : "+ path.GetFileName(FileOutput)]</InArgument>
                              </Assign.Value>
                            </Assign>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_19" Message="[msg]" />
                          </Sequence>
                        </If.Else>
                      </If>
                    </Sequence>
                    <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Export Images to PDF workflow" sap:VirtualizedContainerService.HintSize="726,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_18" UnSafe="False" WorkflowFileName="X Int Images to PDF.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InArgument x:TypeArguments="x:String" x:Key="Folder">[PathWorking]</InArgument>
                        <InArgument x:TypeArguments="x:String" x:Key="FileOut">[FileOutput]</InArgument>
                        <InArgument x:TypeArguments="x:Double" x:Key="Resolution">72</InArgument>
                        <InArgument x:TypeArguments="p1:Document" x:Key="DOM" />
                      </ui:InvokeWorkflowFile.Arguments>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </ui:InvokeWorkflowFile>
                    <Assign sap:VirtualizedContainerService.HintSize="726,60" sap2010:WorkflowViewState.IdRef="Assign_80">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Boolean">[Result]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Boolean">True</InArgument>
                      </Assign.Value>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                    </Assign>
                  </Sequence>
                </TryCatch.Try>
                <TryCatch.Catches>
                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="772,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ActivityAction x:TypeArguments="s:Exception">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                      </ActivityAction.Argument>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_20" Level="Error" Message="[&quot;Redaction Failed &quot; + exception.Message]">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:LogMessage>
                    </ActivityAction>
                  </Catch>
                </TryCatch.Catches>
              </TryCatch>
              <FlowStep.Next>
                <x:Reference>__ReferenceID1</x:Reference>
              </FlowStep.Next>
            </FlowStep>
          </FlowDecision.True>
          <FlowDecision.False>
            <FlowStep x:Name="__ReferenceID3">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">670,584</av:Point>
                  <av:Size x:Key="ShapeSize">200,51</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="LogMessage_16" Level="Error" Message="[&quot;Exiting.....&quot;]">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:LogMessage>
            </FlowStep>
          </FlowDecision.False>
        </FlowDecision>
      </FlowStep.Next>
    </FlowStep>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <FlowStep x:Name="__ReferenceID9">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">360,74</av:Point>
          <av:Size x:Key="ShapeSize">200,51</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">460,126 460,246.5</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim sourced As String = &quot;&quot;&#xA;processtype = &quot;&quot;&#xA;&#xA;Status=&quot;N/A&quot;&#xA;&#xA;&#xA;If IsNothing(FileINput) OrElse Not system.io.Path.IsPathRooted(FileInput) OrElse Not system.io.file.Exists(FileInput) Then&#xA;&#x9;console.WriteLine(&quot;Error: Input File Not Found! Please provide a fully rooted path for the FileInput argument&quot;)&#xA;&#x9;If Not IsNothing(FileINput) Then console.WriteLine(Fileinput)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;If IsNothing(FileOutput) OrElse Not system.io.Path.IsPathRooted(FileOutput)  OrElse Not system.io.Directory.Exists(system.io.path.GetDirectoryName(FileOutput)) Then&#xA;&#x9;console.WriteLine(&quot;Error: FileOutput argument must be a fully rooted path.&quot;)&#xA;&#x9;If Not IsNothing(FileOutput) Then console.WriteLine(FileOutput)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;' Get Extension&#xA;ext = system.io.Path.GetExtension(Fileinput).ToLower&#xA;If Not silent Then console.WriteLine(&quot;File Type: &quot; + ext.ToUpper)&#xA;Select ext &#xA;&#x9;Case &quot;.pdf&quot;&#xA;&#x9;&#x9;processtype = &quot;PDF&quot;&#xA;&#x9;Case &quot;.jpg&quot;&#xA;&#x9;&#x9;processtype = &quot;IMG&quot;&#xA;&#x9;Case &quot;.jpeg&quot;&#xA;&#x9;&#x9;processtype = &quot;IMG&quot;&#xA;&#x9;Case &quot;.png&quot;&#xA;&#x9;&#x9;processtype = &quot;IMG&quot;&#xA;&#x9;Case &quot;.bmp&quot;&#xA;&#x9;&#x9;processtype = &quot;IMG&quot;&#xA;&#x9;Case &quot;.gif&quot;&#xA;&#x9;&#x9;processtype = &quot;IMG&quot;&#xA;&#x9;Case &quot;.tiff&quot;&#xA;&#x9;&#x9;processtype = &quot;&quot;&#xA;&#x9;Case &quot;.tif&quot;&#xA;&#x9;&#x9;processtype = &quot;&quot;&#xA;&#x9;End Select&#x9;&#xA;&#xA;If Not silent Then&#xA;&#x9;If processtype.Length &gt; 0 Then console.WriteLine(&quot;Preparing to process &quot;+processtype)&#xA;End If&#xA;&#xA;&#xA;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_21">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="x:String" x:Key="fileinput">[FileInput]</InArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="processtype">[processtype]</OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ext">[ext]</OutArgument>
          <InArgument x:TypeArguments="s:String[]" x:Key="formatsImages">[FormatsImage]</InArgument>
          <InArgument x:TypeArguments="x:Boolean" x:Key="silent">[Silent]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="FileOutput">[FileOutput]</InArgument>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="Result">[Result]</OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Status">[Status]</OutArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <FlowStep.Next>
        <FlowSwitch x:TypeArguments="x:String" x:Name="__ReferenceID5" DisplayName="Flow Switch" Expression="[ProcessType.ToLower]" sap:VirtualizedContainerService.HintSize="70,87" sap2010:WorkflowViewState.IdRef="FlowSwitch`1_1">
          <FlowSwitch.Default>
            <FlowStep x:Name="__ReferenceID6">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">5,259</av:Point>
                  <av:Size x:Key="ShapeSize">230,61</av:Size>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <WriteLine DisplayName="Write Line" sap:VirtualizedContainerService.HintSize="230,61" sap2010:WorkflowViewState.IdRef="WriteLine_1" Text="Exiting Redaction / Cancelled">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </WriteLine>
            </FlowStep>
          </FlowSwitch.Default>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:Point x:Key="ShapeLocation">425,246.5</av:Point>
              <av:Size x:Key="ShapeSize">70,87</av:Size>
              <av:PointCollection x:Key="Default">425,290 235,290</av:PointCollection>
              <av:PointCollection x:Key="pdfConnector">460,333.5 460,446</av:PointCollection>
              <av:PointCollection x:Key="imgConnector">495,290 670,290</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <FlowStep x:Key="img" x:Name="__ReferenceID7">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <av:Point x:Key="ShapeLocation">670,264</av:Point>
                <av:Size x:Key="ShapeSize">200,51</av:Size>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Invoke Image Redaction workflow" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_12" UnSafe="False" WorkflowFileName="X Image Redaction.xaml">
              <ui:InvokeWorkflowFile.Arguments>
                <InArgument x:TypeArguments="x:String" x:Key="Formula">[Formula]</InArgument>
                <InArgument x:TypeArguments="s:String[]" x:Key="Keywords">[Keywords]</InArgument>
                <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
                <InArgument x:TypeArguments="s:String[]" x:Key="FormulaAuto">[FormulaAuto]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="OCREngine">[OCREngine]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="OCRAPIKey">[OCRAPIKey]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="OCREndpoint">[OCREndpoint]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="InputFile">[FileInput]</InArgument>
                <InArgument x:TypeArguments="x:String" x:Key="InputFolder">[FolderInput]</InArgument>
                <InOutArgument x:TypeArguments="x:String" x:Key="OutputFolder">[FolderOutput]</InOutArgument>
                <InOutArgument x:TypeArguments="x:String" x:Key="OutputFile">[FileOutput]</InOutArgument>
                <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                <InArgument x:TypeArguments="x:Boolean" x:Key="HightlightOnly">[HighlightOnly]</InArgument>
              </ui:InvokeWorkflowFile.Arguments>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </ui:InvokeWorkflowFile>
          </FlowStep>
          <x:Reference>__ReferenceID4<x:Key>pdf</x:Key></x:Reference>
        </FlowSwitch>
      </FlowStep.Next>
    </FlowStep>
    <x:Reference>__ReferenceID5</x:Reference>
    <x:Reference>__ReferenceID6</x:Reference>
    <x:Reference>__ReferenceID7</x:Reference>
    <x:Reference>__ReferenceID8</x:Reference>
  </Flowchart>
</Activity>
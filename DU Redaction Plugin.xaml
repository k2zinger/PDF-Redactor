<Activity mc:Ignorable="sap sap2010" x:Class="DU_Redaction" this:DU_Redaction.Silent="False" this:DU_Redaction.RedactColor="[System.Drawing.Color.Black]" this:DU_Redaction.FormulaAuto="[{&quot;ssn&quot;,&quot;ein&quot;,&quot;dates&quot;,&quot;currency&quot;,&quot;email&quot;,&quot;phone&quot;}]" this:DU_Redaction.WaterMarkLocation="[New System.Drawing.Point(0,0)]" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:p="http://schemas.uipath.com/workflow/activities/document-processing-contracts/results" xmlns:p1="http://schemas.uipath.com/workflow/activities/document-processing-contracts/dom" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Drawing;assembly=System.Drawing" xmlns:sd1="clr-namespace:System.Data;assembly=System.Data" xmlns:swf="clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:upap="clr-namespace:UiPath.PDF.Activities.PDF;assembly=UiPath.PDF.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property sap2010:Annotation.AnnotationText="Ouptut PDF File.  If path is not rooted the output will be saved into a subfolder of the input folder path." Name="FileOutput" Type="InOutArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="Input PDF File" Name="FileInput" Type="InArgument(x:String)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="ExtractionResult is the Result from the Document Understanding Extraction Scope Activity" Name="ExtractionResult" Type="InArgument(p:ExtractionResult)" />
    <x:Property sap2010:Annotation.AnnotationText="If set to True, documents will process without any status reports to screen." Name="Silent" Type="InArgument(x:Boolean)" />
    <x:Property sap2010:Annotation.AnnotationText="Choose the color for the redaction annotation. &#xA;For example: &#xA;System.Drawing.Color.Black&#xA;System.Drawing.Color.White&#xA;System.Drawing.Color.Blue&#xA;&#xA;The default is white" Name="RedactColor" Type="InArgument(sd:Color)" />
    <x:Property sap2010:Annotation.AnnotationText="An array of keywords to redact - useful for names of people or company" Name="Keywords" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="DocumentObjectModel  is the Result from Document Understanding Digitize Activity" Name="DocumentObjectModel" Type="InArgument(p1:Document)">
      <x:Property.Attributes>
        <RequiredArgumentAttribute />
      </x:Property.Attributes>
    </x:Property>
    <x:Property sap2010:Annotation.AnnotationText="Array of prebuilt regex patterns.  Specify which regex patters to apply in the redaction.  Here are the available options.&#xA;{&quot;ssn&quot;,&quot;phone&quot;,&quot;email&quot;,&quot;dates&quot;,&quot;ein&quot;,&quot;phone&quot;,&quot;currency&quot;}" Name="FormulaAuto" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="User-Defined Custom Regex Patterns to use in the redaction" Name="Formula" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="RedactFields is an Array of the Fields from the existing taxonomy, that you want to redact." Name="RedactFields" Type="InArgument(s:String[])" />
    <x:Property sap2010:Annotation.AnnotationText="Set the origin point for the Logo/Watermark.&#xA;For example:&#xA;New System.Drawing.Point(0,0)" Name="WaterMarkLocation" Type="InArgument(sd:Point)" />
    <x:Property sap2010:Annotation.AnnotationText="File to a PNG use as a watermark or logo on the redacted document" Name="WaterMarkFile" Type="InArgument(x:String)" />
    <x:Property sap2010:Annotation.AnnotationText="If set to true, the process highlights words instead of redacts them" Name="HighlightOnly" Type="InArgument(x:Boolean)" />
  </x:Members>
  <this:DU_Redaction.DocumentObjectModel>
    <InArgument x:TypeArguments="p1:Document" />
  </this:DU_Redaction.DocumentObjectModel>
  <this:DU_Redaction.Formula>
    <InArgument x:TypeArguments="x:String" />
  </this:DU_Redaction.Formula>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1762,1386</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>DU_Redaction_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="47">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>System.Windows.Forms</x:String>
      <x:String>System.Windows.Forms.Layout</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.PDF.Activities.PDF</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>PdfSharp</x:String>
      <x:String>PdfSharp.Pdf</x:String>
      <x:String>PdfSharp.Internal</x:String>
      <x:String>PdfSharp.Pdf.IO</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Dom</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>System.Windows.Forms.Automation</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Taxonomy</x:String>
      <x:String>UiPath.IntelligentOCR.Activities.TaxonomyManagement</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="82">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>System.Windows.Forms</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.Runtime.InteropServices.RuntimeInformation</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>UiPath.PDF.Activities</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
      <AssemblyReference>PdfSharp</AssemblyReference>
      <AssemblyReference>PDFSharp.Extensions</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.CV</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR</AssemblyReference>
      <AssemblyReference>UiPathTeam.StatusProgress.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.IntelligentOCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OmniPage.Activities</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>System.Runtime.WindowsRuntime</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Flowchart sap2010:Annotation.AnnotationText="This activity redacts PDF Documents without the use of Adobe Acrobat reader, or any other third party desktop software. " sap:VirtualizedContainerService.HintSize="1344,1321" sap2010:WorkflowViewState.IdRef="Flowchart_2">
    <Flowchart.Variables>
      <Variable x:TypeArguments="x:Int32" Default="0" Name="i" />
      <Variable x:TypeArguments="x:String" Default="[path.GetTempPath+&quot;\&quot;]" Name="pathTemp" />
      <Variable x:TypeArguments="x:Int32" Name="r" />
      <Variable x:TypeArguments="x:String" Name="FilePDF">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="PathWorking">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="PathStripped">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="x:String" Name="pathRedacted">
        <Variable.Default>
          <Literal x:TypeArguments="x:String" Value="" />
        </Variable.Default>
      </Variable>
      <Variable x:TypeArguments="ui:Image" Name="imgin" />
      <Variable x:TypeArguments="x:Double" Name="percent" />
      <Variable x:TypeArguments="x:String" Name="txt" />
      <Variable x:TypeArguments="swf:Form" Name="Frm_i" />
      <Variable x:TypeArguments="swf:Form" Name="Frm" />
      <Variable x:TypeArguments="x:Int32" Name="PageCount" />
      <Variable x:TypeArguments="x:String" Name="EOMSerialized" />
      <Variable x:TypeArguments="x:Double" Default="4.084967" Name="DOMScale" />
      <Variable x:TypeArguments="sd1:DataTable" Name="DH" />
      <Variable x:TypeArguments="x:String" Name="rootname" />
      <Variable x:TypeArguments="x:String" Name="FileEOM" />
      <Variable x:TypeArguments="s:String[]" Name="Fields" />
      <Variable x:TypeArguments="ui:Image" Name="WaterMark" />
      <Variable x:TypeArguments="x:String" Name="ColorText" />
      <Variable x:TypeArguments="x:String" Name="FontFamily" />
      <Variable x:TypeArguments="x:Int32" Name="FontSize" />
      <Variable x:TypeArguments="x:Int32" Name="OffsetY" />
      <Variable x:TypeArguments="x:Int32" Name="OffsetX" />
      <Variable x:TypeArguments="x:Boolean" Name="BoolOK" />
      <Variable x:TypeArguments="x:String" Name="DOMText" />
      <Variable x:TypeArguments="sd1:DataTable" Name="DT_DOM" />
      <Variable x:TypeArguments="x:String" Default="orange" Name="statusColor" />
      <Variable x:TypeArguments="swf:Form" Name="statusContainer" />
      <Variable x:TypeArguments="s:String[]" Default="[{&quot;center&quot;,&quot;center&quot;}]" Name="statuslocation" />
      <Variable x:TypeArguments="x:String" Name="statusMessage" />
      <Variable x:TypeArguments="x:String" Name="EOMText" />
      <Variable x:TypeArguments="sd1:DataTable" Name="DF" />
      <Variable x:TypeArguments="x:Boolean" Name="EOMRedaction" />
      <Variable x:TypeArguments="s:String[]" Name="files" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[New List(Of String)]" Name="OutputFiles" />
      <Variable x:TypeArguments="x:Boolean" Name="BoolFiles" />
    </Flowchart.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsPinned">False</x:Boolean>
        <av:Point x:Key="ShapeLocation">530,92.5</av:Point>
        <av:Size x:Key="ShapeSize">60,75</av:Size>
        <x:Double x:Key="Width">1310</x:Double>
        <x:Double x:Key="Height">1285.1104879523343</x:Double>
        <av:PointCollection x:Key="ConnectorLocation">590,130 830,130 830,194.02</av:PointCollection>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Flowchart.StartNode>
      <x:Reference>__ReferenceID10</x:Reference>
    </Flowchart.StartNode>
    <FlowStep>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">3,32</av:Point>
          <av:Size x:Key="ShapeSize">334,536</av:Size>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:Comment sap:VirtualizedContainerService.HintSize="334,536" sap2010:WorkflowViewState.IdRef="Comment_2" Text="// DU Redaction Activity&#xA;&#xA;The DU Redaction Activity is a step up from the basic Redaction Activity in that it provides for&#xA;- more intelligent redaction,&#xA;-handwriting capability, &#xA;- ability to redact paragraphs rather than just words&#xA;&#xA;Arguments:&#xA;INPUT - STRING - FileInput &gt; Path to PDF file&#xA;&#xA;INPUT - DocumentObjectModel  - DocumentObjectModel &gt; Result from DU Activity&#xA;&#xA;INPUT - ExtractionResult - ExtractionResult &gt; Result from the DU Extraction Scope Activity&#xA;&#xA;INPUT - System.Drawings.Color - RedactColor &gt; Redaction Color&#xA;&#xA;INPUT - String - Highlight &gt; Set to True to Highlight, instead of Redacting&#xA;&#xA;INPUT - String - WatermarkFile &gt; Path to the Image file to use for watermarkeing&#xA;&#xA;INPUT - System.Drawing.Point &gt; X,Y Point to poisittion the watermark&#xA;&#xA;INPUT - String - Formula &gt; Regex Pattern to redact text within the document&#xA;&#xA;INPUT - String() - Keywords &gt; Array of strings to include in the redaction process&#xA;&#xA;INPUT - String() - ForumlaAuto &gt; Array of prebuilt regex patterns available by default: {ssn,US phone,email,dates,ein,phone,currency}&#xA;&#xA;INPUT - String() - RedactFields &gt; Array of Fields from the existing taxonomy, that you want to redact.&#xA;&#xA;INPUT - Boolean - Silent If set to true, the status is not shown to screen                   &#xA;            ">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:Comment>
    </FlowStep>
    <FlowStep>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">1110,57</av:Point>
          <av:Size x:Key="ShapeSize">200,66</av:Size>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_9">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:MultipleAssign DisplayName="Multiple Assign" sap:VirtualizedContainerService.HintSize="338,253" sap2010:WorkflowViewState.IdRef="MultipleAssign_1">
          <ui:MultipleAssign.AssignOperations>
            <scg:List x:TypeArguments="ui:AssignOperation" Capacity="8">
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_1">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">[FileInput]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">C:\Users\bernard.lawes\Documents\UiPath\__DATA\RedactionDev\General_Contracting.pdf</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_2">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">[FileOutput]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">C:\Users\bernard.lawes\Documents\UiPath\__DATA\RedactionDev\redacted.pdf</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_3">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="s:String[]">[Keywords]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="s:String[]">[{"Bernard","Lawes","Insurance"}]</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_4">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="sd:Color">[RedactColor]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="sd:Color">[System.Drawing.Color.Black]</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_5">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="s:String[]">[FormulaAuto]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="s:String[]">[{"ssn","ein","dates","currency","email","phone"}]</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
              <ui:AssignOperation sap2010:WorkflowViewState.IdRef="AssignOperation_6">
                <ui:AssignOperation.To>
                  <OutArgument x:TypeArguments="x:String">[WaterMarkFile]</OutArgument>
                </ui:AssignOperation.To>
                <ui:AssignOperation.Value>
                  <InArgument x:TypeArguments="x:String">[environment.CurrentDirectory+"\lib\watermark.png"]</InArgument>
                </ui:AssignOperation.Value>
              </ui:AssignOperation>
            </scg:List>
          </ui:MultipleAssign.AssignOperations>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:MultipleAssign>
        <ui:ReadTextFile Content="[DOMText]" DisplayName="Read DOM Text File" FileName="C:\Users\bernard.lawes\Documents\UiPath\__DATA\RedactionDev\DOM.json" sap:VirtualizedContainerService.HintSize="338,51" sap2010:WorkflowViewState.IdRef="ReadTextFile_2">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ReadTextFile>
        <ui:ReadTextFile Content="[EOMText]" DisplayName="Read EOM Text File" FileName="C:\Users\bernard.lawes\Documents\UiPath\__DATA\RedactionDev\EOM.json" sap:VirtualizedContainerService.HintSize="338,51" sap2010:WorkflowViewState.IdRef="ReadTextFile_3">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ReadTextFile>
        <ui:BuildDataTable DataTable="[RedactFields]" DisplayName="Build Data Table" sap:VirtualizedContainerService.HintSize="338,51" sap2010:WorkflowViewState.IdRef="BuildDataTable_1" TableInfo="&lt;NewDataSet&gt;&#xA;  &lt;xs:schema id=&quot;NewDataSet&quot; xmlns=&quot;&quot; xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot; xmlns:msdata=&quot;urn:schemas-microsoft-com:xml-msdata&quot;&gt;&#xA;    &lt;xs:element name=&quot;NewDataSet&quot; msdata:IsDataSet=&quot;true&quot; msdata:MainDataTable=&quot;TableName&quot; msdata:UseCurrentLocale=&quot;true&quot;&gt;&#xA;      &lt;xs:complexType&gt;&#xA;        &lt;xs:choice minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;&gt;&#xA;          &lt;xs:element name=&quot;TableName&quot;&gt;&#xA;            &lt;xs:complexType&gt;&#xA;              &lt;xs:sequence&gt;&#xA;                &lt;xs:element name=&quot;Field&quot; minOccurs=&quot;0&quot;&gt;&#xA;                  &lt;xs:simpleType&gt;&#xA;                    &lt;xs:restriction base=&quot;xs:string&quot;&gt;&#xA;                      &lt;xs:maxLength value=&quot;100&quot; /&gt;&#xA;                    &lt;/xs:restriction&gt;&#xA;                  &lt;/xs:simpleType&gt;&#xA;                &lt;/xs:element&gt;&#xA;                &lt;xs:element name=&quot;Redact&quot; type=&quot;xs:boolean&quot; minOccurs=&quot;0&quot; /&gt;&#xA;              &lt;/xs:sequence&gt;&#xA;            &lt;/xs:complexType&gt;&#xA;          &lt;/xs:element&gt;&#xA;        &lt;/xs:choice&gt;&#xA;      &lt;/xs:complexType&gt;&#xA;    &lt;/xs:element&gt;&#xA;  &lt;/xs:schema&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;Field&gt;Timeline&lt;/Field&gt;&#xA;    &lt;Redact&gt;true&lt;/Redact&gt;&#xA;  &lt;/TableName&gt;&#xA;  &lt;TableName&gt;&#xA;    &lt;Field&gt;Permits&lt;/Field&gt;&#xA;    &lt;Redact&gt;false&lt;/Redact&gt;&#xA;  &lt;/TableName&gt;&#xA;&lt;/NewDataSet&gt;">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:BuildDataTable>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="'Read in DOM as JObject&#xA;Dim job as Newtonsoft.Json.Linq.JObject = JsonConvert.DeserializeObject(Of JObject)(serialized)&#xA;&#xA;'Read in DOM from Text File&#xA;dom = New Uipath.DocumentProcessing.Contracts.dom.document&#xA;dom = Uipath.DocumentProcessing.Contracts.dom.document.deserialize(serialized)" DisplayName="TEXT TO DOM" sap:VirtualizedContainerService.HintSize="338,51" sap2010:WorkflowViewState.IdRef="InvokeCode_29">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="serialized">[DOMText]</InArgument>
            <OutArgument x:TypeArguments="p1:Document" x:Key="dom">[DocumentObjectModel]</OutArgument>
          </ui:InvokeCode.Arguments>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:InvokeCode>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="'Read in DOM as JObject&#xA;Dim job as Newtonsoft.Json.Linq.JObject = JsonConvert.DeserializeObject(Of JObject)(serialized)&#xA;&#xA;'Read in DOM from Text File&#xA;Eom = New Uipath.DocumentProcessing.Contracts.Results.ExtractionResult&#xA;EOM = Uipath.DocumentProcessing.Contracts.Results.ExtractionResult.Deserialize(serialized)" DisplayName="TEXT TO EOM" sap:VirtualizedContainerService.HintSize="338,51" sap2010:WorkflowViewState.IdRef="InvokeCode_35">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="x:String" x:Key="serialized">[EOMText]</InArgument>
            <OutArgument x:TypeArguments="p:ExtractionResult" x:Key="EOM">[ExtractionResult]</OutArgument>
          </ui:InvokeCode.Arguments>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:InvokeCode>
      </Sequence>
    </FlowStep>
    <FlowStep x:Name="__ReferenceID0">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">450,1160.08</av:Point>
          <av:Size x:Key="ShapeSize">200,51</av:Size>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="Try&#xA;&#x9;frm.Close&#xA;&#x9;frm.Dispose&#xA;Catch ex As Exception&#xA;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Forms" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_31">
        <ui:InvokeCode.Arguments>
          <InArgument x:TypeArguments="swf:Form" x:Key="frm">[Frm]</InArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
    </FlowStep>
    <FlowStep x:Name="__ReferenceID5">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">450,516.08</av:Point>
          <av:Size x:Key="ShapeSize">200,66</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">550,582.08 550,634.08</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence DisplayName="DOM Redaction" sap:VirtualizedContainerService.HintSize="947,4014" sap2010:WorkflowViewState.IdRef="Sequence_21">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim X As Integer&#xA;Dim Y As Integer&#xA;Dim W As Integer&#xA;Dim H As Integer&#xA;Dim i As Integer&#xA;Dim rect As system.drawing.rectangle&#xA;Dim pageIndex As Integer&#xA;Dim box As Uipath.DocumentProcessing.Contracts.box&#xA;&#xA;&#x9;&#xA;'Build DataTable for Words&#xA;DT = New DataTable(&quot;Document Words&quot;)&#xA;Dim DR As DataRow&#xA;&#xA;'Establish Colum for Type&#xA;Dim colType As DataColumn =  New DataColumn(&quot;Type&quot;)&#xA;colType.DataType = system.Type.GetType(&quot;System.String&quot;)&#xA;DT.Columns.Add(colType)&#xA;&#xA;'Establish Colum for Page&#xA;Dim colPage As DataColumn =  New DataColumn(&quot;Page&quot;)&#xA;colPage.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colPage)&#xA;&#xA;'Establish Colum for Group&#xA;Dim colGroup As DataColumn =  New DataColumn(&quot;Group&quot;)&#xA;colGroup.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colGroup)&#xA;&#xA;'Establish Colum for Word&#xA;Dim colWord As DataColumn =  New DataColumn(&quot;Word&quot;)&#xA;colWord.DataType = system.Type.GetType(&quot;System.String&quot;)&#xA;DT.Columns.Add(colWord)&#xA;&#xA;'Establish Colum for X&#xA;Dim colX As DataColumn =  New DataColumn(&quot;X&quot;)&#xA;colX.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colX)&#xA;&#xA;'Establish Colum for Y&#xA;Dim colY As DataColumn =  New DataColumn(&quot;Y&quot;)&#xA;colY.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colY)&#xA;&#xA;'Establish Colum for W&#xA;Dim colW As DataColumn =  New DataColumn(&quot;W&quot;)&#xA;colW.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colW)&#xA;&#xA;'Establish Colum for H&#xA;Dim colH As DataColumn =  New DataColumn(&quot;H&quot;)&#xA;colH.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DT.Columns.Add(colH)&#xA;&#xA;'Get Page Data&#xA;For Each page As Uipath.DocumentProcessing.Contracts.dom.Page  In dom.pages&#xA;&#xA;&#x9;&#xA;&#x9;pageIndex = page.pageIndex&#xA;&#x9;box = page.size&#xA;&#x9;&#xA;&#x9;Dim currentPageWidth As Double = box.Width&#xA;&#x9;Dim currentPageHeight As Double = box.Height&#xA;&#x9;&#xA;&#x9;'Hardcode Scale for now - assumes Portrait of width &lt;= Height&#xA;&#x9;If currentPageWidth &lt;= currentPageHeight Then  Scale = 4.1666666667 Else Scale = 3.78914 '1&#xA;&#x9;&#xA;&#x9;'Get Page Box&#xA;&#xA;&#x9;X = CInt(box.Left*scale)&#xA;&#x9;Y = CInt(box.Top*scale)&#xA;&#x9;W = CInt(box.Width*scale)&#xA;&#x9;H = CInt(box.Height*scale)&#xA;&#xA;&#x9;&#xA;&#xA;&#x9;'Enter into Datatable&#xA;&#x9;DR = DT.NewRow&#xA;&#x9;DR(&quot;Type&quot;) = &quot;Page&quot;&#xA;&#x9;DR(&quot;Page&quot;) = pageIndex&#xA;&#x9;DR(&quot;Word&quot;) = &quot;&quot;&#xA;&#x9;DR(&quot;X&quot;) = X&#xA;&#x9;DR(&quot;Y&quot;) = Y&#xA;&#x9;DR(&quot;W&quot;) = W&#xA;&#x9;DR(&quot;H&quot;) = H&#xA;&#x9;DT.rows.Add(DR)&#xA;&#x9;&#xA;&#x9;'Get Page Words, Locations, Dimensions&#xA;&#x9;For Each sect As Uipath.DocumentProcessing.Contracts.dom.PageSection  In page.sections&#xA;&#x9;&#x9;For Each wordGroup As UiPath.DocumentProcessing.Contracts.Dom.WordGroup  In sect.WordGroups&#xA;&#x9;&#x9;&#x9;Dim j As Integer&#xA;&#x9;&#x9;&#x9;For Each word As UiPath.DocumentProcessing.Contracts.Dom.Word In wordGroup.words&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Get Word Box&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Dim groupIndex As Integer = j&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;box = word.box&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X = CInt(Math.Floor(box.Left*scale))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Y = CInt(Math.Floor(box.Top*scale))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;W = CInt(Math.Ceiling(box.Width*scale))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;H = CInt(Math.Ceiling(box.Height*scale))&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Enter into Datatable&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR = DT.NewRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Type&quot;) = &quot;Word&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Page&quot;) = pageIndex&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Group&quot;) = groupIndex &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Word&quot;) = word.text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;X&quot;) = X&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Y&quot;) = Y&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;W&quot;) = W&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;H&quot;) = H&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DT.rows.Add(DR)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;j = j+1&#xA;&#x9;&#x9;Next&#x9;&#x9;&#xA;&#x9;Next&#x9;&#xA;&#x9;&#xA;&#x9;'rect  = New system.Drawing.Rectangle(X,Y,W,H)&#xA;&#x9;i = i+1&#xA;Next" DisplayName="DOM TO DT" sap:VirtualizedContainerService.HintSize="905,164" sap2010:WorkflowViewState.IdRef="InvokeCode_40">
          <ui:InvokeCode.Arguments>
            <InArgument x:TypeArguments="p1:Document" x:Key="dom">[DocumentObjectModel]</InArgument>
            <InArgument x:TypeArguments="x:Double" x:Key="scale">[DOMScale]</InArgument>
            <OutArgument x:TypeArguments="sd1:DataTable" x:Key="DT">[DT_DOM]</OutArgument>
          </ui:InvokeCode.Arguments>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:InvokeCode>
        <Sequence DisplayName="STATUS" sap:VirtualizedContainerService.HintSize="905,2187" sap2010:WorkflowViewState.IdRef="Sequence_18">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[Not Silent]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="863,470" sap2010:WorkflowViewState.IdRef="If_8">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <Sequence sap:VirtualizedContainerService.HintSize="376,283" sap2010:WorkflowViewState.IdRef="Sequence_16">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_20">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">["Starting Redaction Process"]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_11" Message="[statusMessage]" />
              </Sequence>
            </If.Then>
          </If>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="If isnothing(formula) Then formula = &quot;&quot;&#xA;Dim dummy As String = &quot;cr42guyt2nbernardbum424lsuslawes986d&quot;&#xA;If isnothing(keywords) Then keywords = {dummy}&#xA;Dim kwords As String = &quot;&quot;&#xA;&#x9;&#xA;If isnothing(formulaAuto) Then formulaauto = {}&#xA;&#xA;Dim lst As list(Of String) = New list(Of String)&#xA;Dim kst As list(Of String) = New list(Of String)&#xA;Dim pattern As String = &quot;&quot;&#xA;Dim fmlauto As String = &quot;&quot;&#xA;&#xA;Dim i As  Integer = 0&#xA;If keywords.Length &gt; 0 Then&#xA;&#x9;'Trim spaces between keywords&#xA;&#x9;For Each f As String In keywords&#xA;&#x9;&#x9;If f.Trim.Length &gt; 0 Then&#x9;kst.Add(f.trim)&#xA;&#x9;&#x9;'console.WriteLine(keywords(i).Length.ToString)&#xA;&#x9;&#x9;i = i+ 1&#xA;&#x9;Next&#xA;&#x9;'Join Keywords into on | delimited string&#xA;&#x9;If kst.Count &gt; 0 Then kwords = Join(kst.ToArray,&quot;|&quot;)&#xA;&#x9;&#xA;&#x9;'Add Keywords to list of regex&#xA;&#x9;If kwords.Length &gt; 0 Then  lst.Add(&quot;(?i)(&quot;+kwords+&quot;)&quot;)&#xA;End If&#xA; &#xA;&#xA;'If kwords.Length &gt; 0 Then&#xA;&#xA;'Add Auto Formulas&#xA;For Each f As String In formulaAuto&#xA;&#x9;f = f.ToLower&#xA;&#x9;&#xA;&#x9;Select Case f&#x9;&#xA;&#x9;&#x9;&#x9;Case &quot;ssn&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{3}-\d{2}-\d{4}&quot;&#xA;&#x9;&#x9;&#x9;Case &quot;ein&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\d{2}-\d{7}&quot;&#xA;&#x9;&#x9;&#x9;Case &quot;dates&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;((\d{1,2}[/-]\d{1,2}[/-]\d{4})|(\d{4}[/-]\d{1,2}[/-]\d{1,2}))&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;((?&lt;=\s)(?:(?:(?:(?:0?[13578]|1[02])(?&lt;first&gt;\/|-|\.)31)\k&lt;first&gt;|(?:(?:0?[13-9]|1[0-2])(?&lt;second&gt;\/|-|\.)(?:29|30)\k&lt;second&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:0?2(?&lt;third&gt;\/|-|\.)29\k&lt;third&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:(?:0?[1-9])|(?:1[0-2]))(?&lt;fourth&gt;\/|-|\.)(?:0?[1-9]|1\d|2[0-8])\k&lt;fourth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:(?:(?:January|March|May|July|August|October|December)(?&lt;fifth&gt;\/|-|\s)31)\k&lt;fifth&gt;|(?:(?:January|March|April|May|June|July|August|September|October|November|December)(?&lt;sixth&gt;\/|-|\s)(?:29|30)\k&lt;sixth&gt;))(?:(?:1[6-9]|[2-9]\d)?\d{2})|(?:February(?&lt;seventh&gt;\/|-|\s)29\k&lt;seventh&gt;(?:(?:(?:1[6-9]|[2-9]\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))|(?:January|February|March|April|May|June|July|August|September|October|November|December)(?&lt;eighth&gt;\/|-|\s)(?:0?[1-9]|1\d|2[0-8])\k&lt;eighth&gt;(?:(?:1[6-9]|[2-9]\d)?\d{2}))|(\d{4}[\-\/\.]?((((0[13578])|(1[02]))[\-\/\.]?(([0-2][0-9])|(3[01])))|(((0[469])|(11))[\-\/\.]?(([0-2][0-9])|(30)))|(02[\-\/\.]?[0-2][0-9])))|(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})(,)?(\/|-|\s?)(\d{4})|(\d{4})(\/|-|\s)(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:tember)?|Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)(\/|-|\s)(\d{1,2})|\d{2}[\-\/\.]\d{2}[\-\/\.]\d{4})&quot;&#xA;&#x9;&#x9;&#x9;Case &quot;currency&quot;&#xA;&#x9;&#x9;&#x9;&#x9;'pattern = &quot;([\$円][+-]?[0-9]{1,3}(?:,?[0-9]{3})*(?:\.[0-9]{2})?\s*)&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\$\s?-?0*(?:\d+(?!,)(?:\.\d{1,2})?|(?:\d{1,3}(?:,\d{3})*(?:\.\d{1,2})?))&quot;&#xA;&#x9;&#x9;&#x9;Case &quot;email&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*&quot;&#xA;&#x9;&#x9;&#x9;Case &quot;phone&quot;&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;(\([0-9]{3}\)|[0-9]{3}-)\s{0,1}[0-9]{3}-[0-9]{4}&quot;&#xA;&#x9;&#x9;&#x9;Case Else&#xA;&#x9;&#x9;&#x9;&#x9;pattern = &quot;&quot;&#xA;&#x9;End Select &#xA;&#x9;&#xA;&#x9;If pattern.Length &gt; 0 Then lst.Add(&quot;(&quot;+pattern+&quot;)&quot;)&#xA;Next&#xA;&#xA;'Add Custom Formulas&#xA;If formula.trim.Length &gt; 0 Then &#x9;lst.Add(&quot;(&quot;+formula+&quot;)&quot;)&#xA;&#x9;&#xA;&#xA;Dim customFormula As String = formula&#xA;&#xA;formula = Join(lst.ToArray,&quot;|&quot;)&#xA;&#xA;If Not silent Then&#xA;&#x9;'console.WriteLine(&quot;Keywords: &quot;+kwords)&#xA;&#x9;console.WriteLine(&quot;Common: &quot;+Join(formulaAuto,&quot; | &quot;))&#xA;&#x9;console.WriteLine(&quot;User-Built: &quot;+ customFormula)&#xA;&#x9;If keywords(0) &lt;&gt; dummy Then console.WriteLine(&quot;Keywords: &quot;+ Join(kst.ToArray,&quot; | &quot;)) Else console.WriteLine(&quot;Keywords: &quot;)&#xA;&#x9;'console.WriteLine(&quot;Consolidated Pattern: &quot; + formula)&#xA;End If&#xA;&#xA;'Apply Regex global options&#xA;'Formula = &quot;(?i)&quot;+&quot;(&quot;+Formula+&quot;)&quot;&#xA;&#xA;'console.WriteLine(formula)&#xA;&#xA;" DisplayName="Create Formula" sap:VirtualizedContainerService.HintSize="863,164" sap2010:WorkflowViewState.IdRef="InvokeCode_41">
            <ui:InvokeCode.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="formula">[Formula]</InOutArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="keywords">[Keywords]</InArgument>
              <InArgument x:TypeArguments="s:String[]" x:Key="formulaAuto">[FormulaAuto]</InArgument>
              <InArgument x:TypeArguments="x:Boolean" x:Key="Silent">[Silent]</InArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
          <upap:GetPDFPageCount DisplayName="Get PDF Page Count" FileName="[FileInput]" sap:VirtualizedContainerService.HintSize="863,59" sap2010:WorkflowViewState.IdRef="GetPDFPageCount_5" PageCount="[PageCount]">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </upap:GetPDFPageCount>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#x9;Dim rootPath As String = path.GetDirectoryName(FileInput)&#xA;&#x9;If  IsNothing(fileoutput) Then fileoutput=path.Combine(path.GetTempPath,&quot;Redacted\Redacted-&quot;+path.GetFileName(FileInput))&#xA;&#x9;If Not path.IsPathRooted(fileoutput) Then fileoutput=path.Combine(path.GetTempPath,&quot;Redacted\&quot;+ fileoutput)&#xA;&#x9;fileoutput.Replace(&quot;\\&quot;,&quot;\&quot;)&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;pathStrip = pathTemp+&quot;\Stripped\&quot;&#xA;&#x9;pathWork = pathTemp+ &quot;\Working\&quot;&#xA;&#x9;pathRedacted = pathTemp+&quot;\Redacted\&quot;&#xA;&#x9;&#xA;&#x9;Try &#xA;&#x9;If System.IO.Directory.Exists(pathtemp) Then system.IO.Directory.Delete(pathTemp,True)&#xA;&#x9;System.Threading.Thread.Sleep(2000)&#xA;    System.IO.Directory.CreateDirectory(pathTemp)&#xA;&#x9;System.IO.Directory.CreateDirectory(pathStrip)&#xA;&#x9;System.IO.Directory.CreateDirectory(pathRedacted)&#xA;&#x9;System.IO.Directory.CreateDirectory(pathWork)&#xA;&#x9;If(Not System.IO.Directory.Exists(path.GetDirectoryName(fileOutput))) Then System.IO.Directory.CreateDirectory(fileOutput)&#xA;Catch ex As Exception&#xA;&#x9;pathStrip = pathTemp + &quot;Stripped-&quot;+ path.GetFileNameWithoutExtension(fileinput)+&quot;\&quot;&#xA;&#x9;If(Not System.IO.Directory.Exists(pathStrip)) Then&#xA;&#x9;&#x9;System.IO.Directory.CreateDirectory(pathStrip)&#xA;&#x9;End If&#xA;&#x9;System.IO.Directory.CreateDirectory(pathRedacted)&#xA;&#x9;System.IO.Directory.CreateDirectory(pathWork)&#xA;&#x9;If(Not System.IO.Directory.Exists(path.GetDirectoryName(fileOutput))) Then System.IO.Directory.CreateDirectory(fileOutput)&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#x9;&#xA;" DisplayName="Create Folders" sap:VirtualizedContainerService.HintSize="863,164" sap2010:WorkflowViewState.IdRef="InvokeCode_42">
            <ui:InvokeCode.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="pathTemp">[pathTemp]</InArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="pathRedacted">[pathRedacted]</OutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="fileinput">[FileInput]</InArgument>
              <InOutArgument x:TypeArguments="x:String" x:Key="FileOutput">[FileOutput]</InOutArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
          <If Condition="[path.GetExtension(FileInput).ToLower = &quot;.pdf&quot;]" DisplayName="PDF to PNG" sap:VirtualizedContainerService.HintSize="863,874" sap2010:WorkflowViewState.IdRef="If_9">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <While DisplayName="PDF to Images" sap:VirtualizedContainerService.HintSize="484,716" sap2010:WorkflowViewState.IdRef="While_4">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <While.Condition>
                  <mva:VisualBasicValue x:TypeArguments="x:Boolean" ExpressionText="i&lt;PageCount" sap2010:WorkflowViewState.IdRef="VisualBasicValue`1_1" />
                </While.Condition>
                <Sequence sap:VirtualizedContainerService.HintSize="376,558" sap2010:WorkflowViewState.IdRef="Sequence_17">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_21">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Double">[0.2+(i/PageCount)/3]</InArgument>
                    </Assign.Value>
                  </Assign>
                  <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="334,22" sap2010:WorkflowViewState.IdRef="CommentOut_1">
                    <ui:CommentOut.Body>
                      <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,179" sap2010:WorkflowViewState.IdRef="Sequence_52">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <upap:ExportPDFPageAsImage DisplayName="Export PDF Page As Image" FileName="[FileInput]" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ExportPDFPageAsImage_5" ImageDpi="300" OutputFileName="[pathStripped+&quot;pdf-&quot;+i.ToString+&quot;.png&quot;]" PageNumber="[i+1]">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </upap:ExportPDFPageAsImage>
                      </Sequence>
                    </ui:CommentOut.Body>
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </ui:CommentOut>
                  <upap:ExportPDFPageAsImage sap2010:Annotation.AnnotationText="i.ToString is too narrow in scope&#xD;&#xA;this only covers pages 1-9&#xD;&#xA;once you go to page 10 and beyond, windows will order the pages as 1,10,2,3,etc.&#xD;&#xA;&#xD;&#xA;we need 0's to pad the string or we need unique identifiers that increase (timestamps)" DisplayName="Export PDF Page As Image" FileName="[FileInput]" sap:VirtualizedContainerService.HintSize="334,204" sap2010:WorkflowViewState.IdRef="ExportPDFPageAsImage_4" ImageDpi="300" OutputFileName="[pathStripped+&quot;pdf-&quot;+DateTimeOffset.Now.ToUnixTimeMilliseconds.ToString+&quot;.png&quot;]" PageNumber="[i+1]">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </upap:ExportPDFPageAsImage>
                  <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_22">
                    <Assign.To>
                      <OutArgument x:TypeArguments="x:Int32">[i]</OutArgument>
                    </Assign.To>
                    <Assign.Value>
                      <InArgument x:TypeArguments="x:Int32">[i+1]</InArgument>
                    </Assign.Value>
                  </Assign>
                </Sequence>
              </While>
            </If.Then>
            <If.Else>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="file.Copy(FileInput,PathStripped+path.GetFileName(FileInput))" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_43">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="x:String" x:Key="fileInput">[FileInput]</InArgument>
                  <InArgument x:TypeArguments="x:String" x:Key="pathStripped">[PathStripped]</InArgument>
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </If.Else>
          </If>
          <ui:InvokeCode ContinueOnError="{x:Null}" Code="files = Directory.GetFiles(pathStrip,&quot;*.png&quot;)&#xA;i=0" DisplayName="Collect PNGs" sap:VirtualizedContainerService.HintSize="863,164" sap2010:WorkflowViewState.IdRef="InvokeCode_44">
            <ui:InvokeCode.Arguments>
              <OutArgument x:TypeArguments="s:String[]" x:Key="files">[files]</OutArgument>
              <OutArgument x:TypeArguments="x:Int32" x:Key="i">[i]</OutArgument>
              <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
            </ui:InvokeCode.Arguments>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
          </ui:InvokeCode>
        </Sequence>
        <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[r]" DisplayName="For Each Read and Redact" sap:VirtualizedContainerService.HintSize="905,1491" sap2010:WorkflowViewState.IdRef="ForEach`1_4" Values="[files]">
          <ui:ForEach.Body>
            <ActivityAction x:TypeArguments="x:String">
              <ActivityAction.Argument>
                <DelegateInArgument x:TypeArguments="x:String" Name="item" />
              </ActivityAction.Argument>
              <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="526,1356" sap2010:WorkflowViewState.IdRef="Sequence_20">
                <Sequence.Variables>
                  <Variable x:TypeArguments="ui:Image" Name="imageInput" />
                  <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="words" />
                  <Variable x:TypeArguments="x:String" Name="text" />
                  <Variable x:TypeArguments="x:String" Name="FileOutput" />
                  <Variable x:TypeArguments="ui:Image" Name="ImageOutput" />
                  <Variable x:TypeArguments="scg:List(ui:Image)" Name="images" />
                  <Variable x:TypeArguments="x:String" Name="FilePNG" />
                  <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="wrds" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_23">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Double">[((r+1)/files.Count)*0.40]</InArgument>
                  </Assign.Value>
                </Assign>
                <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_24">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:String">[FilePNG]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:String">[PathWorking+"Redacted-"+r.ToString+".png"]</InArgument>
                  </Assign.Value>
                </Assign>
                <If Condition="[Not Silent]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="484,465" sap2010:WorkflowViewState.IdRef="If_10">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If.Then>
                    <Sequence sap:VirtualizedContainerService.HintSize="376,285" sap2010:WorkflowViewState.IdRef="Sequence_19">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_25">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">["Basic-Redaction in progress..... "+(percent*100-0).ToString("0") + "%"]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,93" sap2010:WorkflowViewState.IdRef="LogMessage_12" Message="[statusMessage]" />
                    </Sequence>
                  </If.Then>
                </If>
                <ui:LoadImage DisplayName="Load Image" FileName="[item]" sap:VirtualizedContainerService.HintSize="484,52" sap2010:WorkflowViewState.IdRef="LoadImage_5" Image="[imageInput]">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:LoadImage>
                <ui:FilterDataTable DataTable="[DT_DOM]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="484,59" sap2010:WorkflowViewState.IdRef="FilterDataTable_4" OutputDataTable="[DF]" SelectColumnsMode="Keep">
                  <ui:FilterDataTable.Filters>
                    <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                      <ui:FilterOperationArgument BooleanOperator="And" Operator="EQ">
                        <ui:FilterOperationArgument.Column>
                          <InArgument x:TypeArguments="x:String">["Page"]</InArgument>
                        </ui:FilterOperationArgument.Column>
                        <ui:FilterOperationArgument.Operand>
                          <InArgument x:TypeArguments="x:Int32">[r]</InArgument>
                        </ui:FilterOperationArgument.Operand>
                      </ui:FilterOperationArgument>
                    </scg:List>
                  </ui:FilterDataTable.Filters>
                  <ui:FilterDataTable.SelectColumns>
                    <scg:List x:TypeArguments="InArgument" Capacity="4">
                      <x:Null />
                    </scg:List>
                  </ui:FilterDataTable.SelectColumns>
                </ui:FilterDataTable>
                <ui:InvokeCode ContinueOnError="{x:Null}" Code="Dim myBrush As system.Drawing.SolidBrush&#xA;Dim myPen As System.Drawing.Pen&#xA;Dim pb As system.windows.Forms.PictureBox = New system.Windows.Forms.PictureBox()&#xA;Dim rect As system.Drawing.Rectangle&#xA;Dim fontColor As system.Drawing.Color&#xA;Dim thickness As Int32 = 3&#xA;Dim j As Int32&#xA;&#xA;If IsNothing(RedactColor) Then RedactColor = system.Drawing.Color.Black&#xA;myBrush =  New SolidBrush(RedactColor)&#xA;myPen = New system.Drawing.Pen(RedactColor, thickness)&#xA;&#xA;'place image in picturebox&#xA;&#xA;pb.image = New Bitmap(imgin, New Size(CInt(DT.rows(0).item(&quot;W&quot;).ToString), CInt(DT.rows(0).item(&quot;H&quot;).ToString)))&#xA;'pb.image = imgin&#xA;&#xA;'Redact the image&#xA;Using g  As system.Drawing.Graphics = system.Drawing.Graphics.FromImage(pb.image) &#xA;&#x9;&#x9;&#x9;For Each DR As datarow In DT.rows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If DR(&quot;Type&quot;).ToString.ToLower = &quot;page&quot; Then Continue For&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;rect = New system.Drawing.Rectangle(CInt(DR(&quot;X&quot;).ToString),CInt(DR(&quot;Y&quot;).ToString),CInt(DR(&quot;W&quot;).ToString),CInt(DR(&quot;H&quot;).ToString))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Redact or Highlihgt Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If regex.IsMatch(DR(&quot;Word&quot;).ToString,formula)   Then&#x9;If highlightOnly Then &#x9;g.DrawRectangle(myPen,rect) Else g.FillRectangle(myBrush, rect)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;console.WriteLine(&quot;Failed to Redact row: &quot; + j.ToString)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Finally&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End Try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;j = j+1&#xA;&#x9;&#x9;&#x9;Next&#xA;End Using&#xA;&#xA;'Save the image to disk&#xA;Try&#xA;&#x9;&#x9;pb.Image.Save(fileout,system.Drawing.Imaging.ImageFormat.Png)&#xA;&#x9;&#x9;pb.Image = Nothing&#xA;Catch ex As Exception&#xA;&#x9;&#x9;console.WriteLine(&quot;Can't Save File: &quot; + ex.Message + &quot; &quot; + fileOut)&#xA;&#x9;&#x9;fileOut = Nothing&#xA;Finally&#xA;&#xA;End Try&#xA;&#xA;'Dispose Image&#xA;imgin.Dispose()&#xA;&#xA;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="484,164" sap2010:WorkflowViewState.IdRef="InvokeCode_45">
                  <ui:InvokeCode.Arguments>
                    <InArgument x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" x:Key="words">[words]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="text">[Text]</InArgument>
                    <InArgument x:TypeArguments="ui:Image" x:Key="imgIn">[imageInput]</InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Formula">[Formula]</InArgument>
                    <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                    <InOutArgument x:TypeArguments="x:String" x:Key="fileOut">[FilePNG]</InOutArgument>
                    <InArgument x:TypeArguments="sd1:DataTable" x:Key="DT">[DF]</InArgument>
                    <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HighlightOnly]</InArgument>
                  </ui:InvokeCode.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeCode>
                <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Delay&#xA;Dim i As Int32&#xA;&#xA;'For i = 1 To 5&#xA;'    System.Threading.Thread.Sleep(100)&#xA;'&#x9;console.WriteLine(i.ToString)&#xA;    'Application.DoEvents()&#xA;'Next&#xA;&#xA;Dim sw As New Stopwatch&#xA;sw.Start()&#xA;Do While sw.ElapsedMilliseconds &lt; interval&#xA;    ' Allows UI to remain responsive&#xA;    Application.DoEvents()&#xA;Loop&#xA;sw.Stop()&#xA;&#xA;'console.WriteLine(&quot;Contine&quot;)&#xA;&#xA;If Not IsNothing(fileout) Then&#xA;&#x9;If file.Exists(fileout) Then&#xA;&#x9;&#x9;files.Add(fileOut)&#xA;&#x9;End If&#xA;End If&#xA;&#xA;Try&#xA;imgin.Dispose()&#xA;Catch ex As Exception&#xA;&#x9;'console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Image / Add to List" sap:VirtualizedContainerService.HintSize="484,164" sap2010:WorkflowViewState.IdRef="InvokeCode_46">
                  <ui:InvokeCode.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="fileout">[FilePNG]</InArgument>
                    <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="files">[OutputFiles]</InOutArgument>
                    <OutArgument x:TypeArguments="ui:Image" x:Key="imgin">[imageInput]</OutArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="interval">500</InArgument>
                  </ui:InvokeCode.Arguments>
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      <x:Boolean x:Key="IsPinned">False</x:Boolean>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                </ui:InvokeCode>
              </Sequence>
            </ActivityAction>
          </ui:ForEach.Body>
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              <x:Boolean x:Key="IsPinned">False</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
        </ui:ForEach>
      </Sequence>
      <FlowStep.Next>
        <FlowStep x:Name="__ReferenceID1">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:Point x:Key="ShapeLocation">450,634.08</av:Point>
              <av:Size x:Key="ShapeSize">200,51</av:Size>
              <av:PointCollection x:Key="ConnectorLocation">550,686.08 550,736.08</av:PointCollection>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <If Condition="[(system.io.Directory.GetFiles(PathWorking)).Count &gt; 0]" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="If_13">
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <If.Then>
              <ui:InvokeCode ContinueOnError="{x:Null}" Code="If IsNothing(ExtractionResult) Then&#xA;&#x9;Console.WriteLine(&quot;No Extraction Provided&quot;)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;If isnothing(redactFields) OrElse redactFields.count = 0 Then&#xA;&#x9;Console.WriteLine(&quot;No Redaction Fields were Provided&quot;)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;EOMRedaction = True" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_54">
                <ui:InvokeCode.Arguments>
                  <InArgument x:TypeArguments="p:ExtractionResult" x:Key="ExtractionResult">[ExtractionResult]</InArgument>
                  <InArgument x:TypeArguments="s:String[]" x:Key="RedactFields">[redactFields]</InArgument>
                  <OutArgument x:TypeArguments="x:Boolean" x:Key="EOMRedaction">[EOMRedaction]</OutArgument>
                </ui:InvokeCode.Arguments>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
              </ui:InvokeCode>
            </If.Then>
            <If.Else>
              <If Condition="[Not Silent]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="484,465" sap2010:WorkflowViewState.IdRef="If_12">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="376,285" sap2010:WorkflowViewState.IdRef="Sequence_25">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_29">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:String">Redaction Failed</InArgument>
                      </Assign.Value>
                    </Assign>
                    <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,93" sap2010:WorkflowViewState.IdRef="LogMessage_14" Message="[statusMessage]" />
                  </Sequence>
                </If.Then>
              </If>
            </If.Else>
          </If>
          <FlowStep.Next>
            <FlowStep x:Name="__ReferenceID8">
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <av:Point x:Key="ShapeLocation">450,736.08</av:Point>
                  <av:Size x:Key="ShapeSize">200,51</av:Size>
                  <av:PointCollection x:Key="ConnectorLocation">550,788.08 550,838.08</av:PointCollection>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <If Condition="[EOMRedaction]" DisplayName="If - EOM Redaction = True" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="If_24">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <If.Then>
                  <Sequence sap:VirtualizedContainerService.HintSize="726,2505" sap2010:WorkflowViewState.IdRef="Sequence_46">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <TryCatch DisplayName="EOM Redaction" sap:VirtualizedContainerService.HintSize="684,2413" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <TryCatch.Try>
                        <Sequence sap:VirtualizedContainerService.HintSize="646,2182" sap2010:WorkflowViewState.IdRef="Sequence_51">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;' Delay&#xA;Dim i As Int32&#xA;&#xA;'For i = 1 To 5&#xA;    'System.Threading.Thread.Sleep(100)&#xA;&#x9;'console.WriteLine(i.ToString)&#xA;    'Application.DoEvents()&#xA;'Next&#xA;&#xA;'console.WriteLine(&quot;Continuing&quot;)&#xA;&#xA;Dim files As String()&#xA;&#xA;Try&#x9;&#xA;&#x9;files = directory.GetFiles(pathStrip,&quot;*.png&quot;)&#xA;&#x9;For Each filename As String In files&#xA;&#x9;&#x9;'console.WriteLine(&quot;Deleting: &quot;+filename)&#xA;&#x9;&#x9;system.io.File.Delete(Filename)&#xA;&#x9;Next&#x9;&#xA;Catch ex As Exception&#xA;&#x9;console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;&#xA;&#xA;&#xA;&#xA;'-----------------------------------------------------------------------&#xA;&#xA;Try&#x9;&#xA;&#x9;files = directory.GetFiles(pathWork,&quot;*.png&quot;)&#xA;&#x9;For Each filename As String In files&#xA;&#x9;&#x9;'console.WriteLine(&quot;Moving: &quot;+filename)&#xA;&#x9;&#x9;system.io.File.Move(filename, pathStrip+system.io.path.GetFileName(Filename))&#xA;&#x9;Next&#x9;&#xA;Catch ex As Exception&#xA;&#x9;console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Move Work to Strip" sap:VirtualizedContainerService.HintSize="604,52" sap2010:WorkflowViewState.IdRef="InvokeCode_66">
                            <ui:InvokeCode.Arguments>
                              <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="pathRedacted">[pathRedacted]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="PathTemp">[pathTemp]</InArgument>
                            </ui:InvokeCode.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeCode>
                          <Sequence DisplayName="EOM Redaction" sap:VirtualizedContainerService.HintSize="604,1998" sap2010:WorkflowViewState.IdRef="Sequence_50">
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="'General Variables&#xA;Dim DR As DataRow&#xA;'Dim box As Uipath.DocumentProcessing.Contracts.box&#xA;Dim boxes As Uipath.DocumentProcessing.Contracts.box()&#xA;&#xA;'Build DataTable for Header&#xA;DH  = New DataTable(&quot;Header&quot;)&#xA;&#xA;'Build DataTable for Fields&#xA;DF  = New DataTable(&quot;Fields&quot;)&#xA;&#xA;'------ HEADER COLUMNS ---------------------------------&#xA;'Establish Colum for Document Type&#xA;Dim col As DataColumn =  New DataColumn(&quot;Type&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.String&quot;)&#xA;DH.Columns.Add(col)&#xA;&#xA;'Establish Colum for Page Count&#xA;col =  New  DataColumn(&quot;Pages&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DH.Columns.Add(col)&#xA;&#xA;'Establish Colum for Page Confidence&#xA;col =  New DataColumn(&quot;Confidence&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Double&quot;)&#xA;DH.Columns.Add(col)&#xA;&#xA;'Establish Colum for Page Widtth&#xA;col =  New  DataColumn(&quot;Width&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Double&quot;)&#xA;DH.Columns.Add(col)&#xA;&#xA;'Establish Colum for Page Height&#xA;col =  New DataColumn(&quot;Height&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Double&quot;)&#xA;DH.Columns.Add(col)&#xA;&#xA;&#xA;&#xA;'Get Header Information&#xA;Dim docType As String&#xA;Dim docWidth As Double &#xA;Dim docHeight As Double &#xA;Dim docConfidence As Double &#xA;&#xA;Dim docPages As Integer = eom.ResultsDocument.Bounds.PageCount&#xA;&#xA;Dim d As Integer = 0&#xA;&#xA;&#xA;Try&#xA;&#x9;'console.WriteLine(&quot;1&quot;)&#xA;&#x9;docType = eom.ResultsDocument.DocumentTypeField.Value&#xA;&#x9;'console.WriteLine(&quot;2&quot;)&#xA;    docConfidence = eom.ResultsDocument.DocumentTypeField.Confidence&#xA;&#x9;'console.WriteLine(&quot;3&quot;)&#xA;&#x9;docHeight = eom.ResultsDocument.DocumentTypeField.Reference.Tokens(0).PageHeight&#xA;&#x9;'console.WriteLine(&quot;4&quot;)&#xA;&#x9;docWidth = eom.ResultsDocument.DocumentTypeField.Reference.Tokens(0).PageWidth&#xA;&#x9;'console.WriteLine(&quot;5&quot;)&#xA;Catch ex As Exception&#xA;&#x9;docType  = eom.GetDocumentType()&#xA;&#x9;docConfidence = eom.ResultsDocument.DocumentTypeField.Confidence&#xA;&#x9;'console.WriteLine(&quot;6&quot;)&#xA;&#x9;'While d &lt; eom.ResultsDocument.Fields.Count-1&#xA;&#x9;While d &lt; eom.ResultsDocument.Fields.Count&#xA;&#x9;&#x9; 'Continue While &#xA;&#x9;&#x9;If eom.ResultsDocument.Fields(d).IsMissing = False&#xA;&#x9;&#x9;&#x9;docWidth = eom.ResultsDocument.Fields(d).Values(0).Reference.Tokens(0).PageWidth&#xA;&#x9;'&#x9;&#x9;console.WriteLine(&quot;7&quot;)&#xA;&#x9;&#x9;&#x9;docHeight= eom.ResultsDocument.Fields(d).Values(0).Reference.Tokens(0).PageHeight&#xA;&#x9;'&#x9;&#x9;console.WriteLine(&quot;8&quot;)&#xA;&#x9;&#x9;&#x9;Exit While&#xA;&#x9;&#x9;End If&#xA;&#x9;&#x9;d = d+1&#xA;&#x9;End While&#xA;&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;'Hardcode Scale for now - assumes Portrait of width &lt;= Height&#xA;If docWidth &lt;= docHeight Then  Scale = 4.1666666667 Else Scale = 3.78914 '1&#xA;&#xA;&#x9;&#xA;&#xA;'Enter into Datatable&#xA;DR = DH.NewRow&#xA;DR(&quot;Type&quot;) = docType&#xA;DR(&quot;Pages&quot;) = docPages&#xA;DR(&quot;Confidence&quot;) = docConfidence&#xA;DR(&quot;Width&quot;) = docWidth&#xA;DR(&quot;Height&quot;) = docHeight&#xA;DH.rows.Add(DR)&#xA;&#xA;'------ FIELD COLUMNS  ---------------------------------&#xA;&#xA;'Establish Colum for Field Name&#xA;col =  New DataColumn(&quot;Field&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.String&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for Field Value&#xA;col =  New DataColumn(&quot;Value&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.String&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for Is Numeric&#xA;col =  New DataColumn(&quot;Numeric&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Boolean&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for Is Missing&#xA;col =  New DataColumn(&quot;Missing&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Boolean&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for Confidence&#xA;col =  New DataColumn(&quot;Confidence&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Double&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for Page No&#xA;col =  New DataColumn(&quot;Page&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for X&#xA;col =  New DataColumn(&quot;X&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for X&#xA;col =  New DataColumn(&quot;Y&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for X&#xA;col =  New DataColumn(&quot;W&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Establish Colum for X&#xA;col =  New DataColumn(&quot;H&quot;)&#xA;col.DataType = system.Type.GetType(&quot;System.Int32&quot;)&#xA;DF.Columns.Add(col)&#xA;&#xA;'Get Fields&#xA;Dim FieldName As String&#xA;Dim FieldNumeric As Boolean&#xA;Dim FieldValue As String&#xA;Dim FieldMissing As Boolean&#xA;Dim FieldConfidence As Double&#xA;Dim PageNo As Integer&#xA;Dim X As Integer&#xA;Dim Y As Integer&#xA;Dim W As Integer&#xA;Dim H As Integer&#xA;&#xA;&#xA;&#xA;For Each field As Uipath.DocumentProcessing.Contracts.Results.ResultsDataPoint In eom.ResultsDocument.Fields&#xA;&#xA;&#x9;'Get this Field's Information&#xA;&#x9;FieldName = field.FieldName&#xA;&#x9;FieldMissing = CBool(field.IsMissing)&#xA;&#x9;&#xA;&#x9;If Not FieldMissing Then&#xA;&#x9;&#x9;For Each value As UiPath.DocumentProcessing.Contracts.Results.ResultsValue In field.Values&#xA;&#x9;&#x9;&#x9;'-------------------------------------------&#xA;&#x9;&#x9;&#x9;'Some fields are not on any specific pages (eg Currency)&#xA;&#x9;&#x9;&#x9;FieldValue = value.Value&#xA;&#x9;&#x9;&#x9;'console.WriteLine(fieldName +&quot;: &quot;+ FieldValue)&#xA;&#x9;&#x9;&#x9;FieldConfidence = value.Confidence&#xA;&#x9;&#x9;&#x9;FieldNumeric= IsNumeric(fieldValue)&#xA;&#x9;&#x9;&#x9;PageNo = value.Reference.Tokens(0).Page&#xA;&#x9;&#x9;&#x9;boxes = value.Reference.Tokens(0).Boxes&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;For Each box As Uipath.DocumentProcessing.Contracts.box In boxes&#xA;&#x9;&#x9;&#x9;&#x9;Try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'box = value.Reference.Tokens(0).Boxes(0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X =CInt( box.Left*Scale)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Y = CInt( box.Top*Scale)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;W = CInt( box.Width*Scale)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;H = CInt( box.Height*Scale)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;PageNo = -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;X = -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Y = -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;W = -1&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;H = -1&#xA;&#x9;&#x9;&#x9;&#x9;Finally&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;'Enter into Datatable&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR = DF.NewRow&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Field&quot;) = FieldName&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Value&quot;) = FieldValue&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Numeric&quot;) = FieldNumeric&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Missing&quot;) = FieldMissing&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Confidence&quot;) = FieldConfidence&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Page&quot;) = PageNo&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;X&quot;) = X&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;Y&quot;) = Y&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;W&quot;) = W&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DR(&quot;H&quot;) = H&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DF.rows.Add(DR)&#xA;&#x9;&#x9;&#x9;&#x9;End Try&#xA;&#x9;&#x9;&#x9;Next&#xA;&#x9;&#x9;&#x9;'-------------------------------------------&#xA;&#xA;&#x9;&#x9;Next&#xA;&#x9;End If&#xA;&#x9;&#xA;&#xA;&#x9;&#xA;Next&#xA;&#xA;&#xA;" DisplayName="EOM TO DT" sap:VirtualizedContainerService.HintSize="562,164" sap2010:WorkflowViewState.IdRef="InvokeCode_67">
                              <ui:InvokeCode.Arguments>
                                <InArgument x:TypeArguments="p:ExtractionResult" x:Key="eom">[ExtractionResult]</InArgument>
                                <InArgument x:TypeArguments="x:Double" x:Key="scale">[DOMScale]</InArgument>
                                <OutArgument x:TypeArguments="sd1:DataTable" x:Key="DF">[DF]</OutArgument>
                                <OutArgument x:TypeArguments="sd1:DataTable" x:Key="DH">[DH]</OutArgument>
                              </ui:InvokeCode.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeCode>
                            <ui:InvokeCode ContinueOnError="{x:Null}" Code="files = Directory.GetFiles(pathStrip,&quot;*.png&quot;)&#xA;i=0" DisplayName="Collect PNGs" sap:VirtualizedContainerService.HintSize="562,164" sap2010:WorkflowViewState.IdRef="InvokeCode_68">
                              <ui:InvokeCode.Arguments>
                                <OutArgument x:TypeArguments="s:String[]" x:Key="files">[files]</OutArgument>
                                <OutArgument x:TypeArguments="x:Int32" x:Key="i">[i]</OutArgument>
                                <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
                              </ui:InvokeCode.Arguments>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:InvokeCode>
                            <ui:ForEach x:TypeArguments="x:String" CurrentIndex="[r]" DisplayName="For Each Read and Redact" sap:VirtualizedContainerService.HintSize="562,1498" sap2010:WorkflowViewState.IdRef="ForEach`1_7" Values="[files]">
                              <ui:ForEach.Body>
                                <ActivityAction x:TypeArguments="x:String">
                                  <ActivityAction.Argument>
                                    <DelegateInArgument x:TypeArguments="x:String" Name="item" />
                                  </ActivityAction.Argument>
                                  <Sequence DisplayName="Body" sap:VirtualizedContainerService.HintSize="526,1363" sap2010:WorkflowViewState.IdRef="Sequence_49">
                                    <Sequence.Variables>
                                      <Variable x:TypeArguments="ui:Image" Name="imageInput" />
                                      <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="words" />
                                      <Variable x:TypeArguments="x:String" Name="text" />
                                      <Variable x:TypeArguments="x:String" Name="FileOutput" />
                                      <Variable x:TypeArguments="ui:Image" Name="ImageOutput" />
                                      <Variable x:TypeArguments="scg:List(ui:Image)" Name="images" />
                                      <Variable x:TypeArguments="x:String" Name="FilePNG" />
                                      <Variable x:TypeArguments="scg:IEnumerable(scg:KeyValuePair(sd:Rectangle, x:String))" Name="wrds" />
                                      <Variable x:TypeArguments="sd1:DataTable" Name="DFF" />
                                    </Sequence.Variables>
                                    <sap:WorkflowViewStateService.ViewState>
                                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                      </scg:Dictionary>
                                    </sap:WorkflowViewStateService.ViewState>
                                    <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_48">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Double">[((r+1)/files.Count)*0.40+.4]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <If Condition="[Not Silent]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="484,465" sap2010:WorkflowViewState.IdRef="If_25">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                      <If.Then>
                                        <Sequence sap:VirtualizedContainerService.HintSize="376,285" sap2010:WorkflowViewState.IdRef="Sequence_48">
                                          <sap:WorkflowViewStateService.ViewState>
                                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                            </scg:Dictionary>
                                          </sap:WorkflowViewStateService.ViewState>
                                          <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_49">
                                            <Assign.To>
                                              <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                                            </Assign.To>
                                            <Assign.Value>
                                              <InArgument x:TypeArguments="x:String">["Intelligent Redaction in progress..... "+(percent*100-0).ToString("0") + "%"]</InArgument>
                                            </Assign.Value>
                                          </Assign>
                                          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,93" sap2010:WorkflowViewState.IdRef="LogMessage_25" Message="[statusMessage]" />
                                        </Sequence>
                                      </If.Then>
                                    </If>
                                    <Assign sap:VirtualizedContainerService.HintSize="484,60" sap2010:WorkflowViewState.IdRef="Assign_50">
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:String">[FilePNG]</OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:String">[PathWorking+"Redacted-"+r.ToString+".png"]</InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <ui:LoadImage DisplayName="Load Image" FileName="[item]" sap:VirtualizedContainerService.HintSize="484,59" sap2010:WorkflowViewState.IdRef="LoadImage_8" Image="[imageInput]">
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:LoadImage>
                                    <ui:FilterDataTable DataTable="[DF]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="484,59" sap2010:WorkflowViewState.IdRef="FilterDataTable_7" OutputDataTable="[DFF]" SelectColumnsMode="Keep">
                                      <ui:FilterDataTable.Filters>
                                        <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
                                          <ui:FilterOperationArgument BooleanOperator="And" Operator="EQ">
                                            <ui:FilterOperationArgument.Column>
                                              <InArgument x:TypeArguments="x:String">["Page"]</InArgument>
                                            </ui:FilterOperationArgument.Column>
                                            <ui:FilterOperationArgument.Operand>
                                              <InArgument x:TypeArguments="x:Int32">[r]</InArgument>
                                            </ui:FilterOperationArgument.Operand>
                                          </ui:FilterOperationArgument>
                                        </scg:List>
                                      </ui:FilterDataTable.Filters>
                                      <ui:FilterDataTable.SelectColumns>
                                        <scg:List x:TypeArguments="InArgument" Capacity="4">
                                          <x:Null />
                                        </scg:List>
                                      </ui:FilterDataTable.SelectColumns>
                                    </ui:FilterDataTable>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="'Dim myBrush As system.Drawing.Brush&#xA;Dim myBrush As System.Drawing.SolidBrush&#xA;Dim myPen As system.Drawing.Pen&#xA;Dim pb As system.windows.Forms.PictureBox = New system.Windows.Forms.PictureBox()&#xA;Dim rect As system.Drawing.Rectangle&#xA;Dim val As String&#xA;Dim field As String&#xA;Dim thickness As Int32 = 3&#xA;&#xA;If IsNothing(RedactColor) Then RedactColor = system.Drawing.Color.Black&#xA;myBrush =  New SolidBrush(RedactColor)&#xA;myPen = New system.Drawing.Pen(RedactColor, thickness)&#xA;&#xA;'place image in picturebox&#xA;pb.image =  New Bitmap(imgin)&#xA;Dim currentField As String = &quot;&quot;&#xA;&#xA;'Redact the image&#xA;Using g  As system.Drawing.Graphics = system.Drawing.Graphics.FromImage(pb.image) &#xA;&#xA;&#x9;&#x9;&#x9;For Each DR As datarow In DT.rows&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'If not on page or missing then skip&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If CBool(DR(&quot;Missing&quot;).ToString) Then Continue For Else rect = New system.Drawing.Rectangle(CInt(DR(&quot;X&quot;).ToString),CInt(DR(&quot;Y&quot;).ToString),CInt(DR(&quot;W&quot;).ToString),CInt(DR(&quot;H&quot;).ToString))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Redact or Highlihgt Text&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;If Fields.Contains(DR(&quot;Field&quot;).ToString,stringComparer.OrdinalIgnoreCase) Then&#x9;If highlightOnly Then &#x9;g.DrawRectangle(myPen,rect) Else g.FillRectangle(myBrush, rect)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Catch ex As Exception&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;console.WriteLine(&quot;Field Not Found: &quot;+DR(&quot;Field&quot;).ToString)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Finally&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;End Try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;Next&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;End Using&#xA;&#xA;'Save the image to disk&#xA;Try&#xA;&#x9;&#x9;pb.Image.Save(fileout, System.Drawing.Imaging.ImageFormat.Png)&#xA;&#x9;&#x9;pb.Image = Nothing&#xA;Catch ex As Exception&#xA;&#x9;&#x9;console.WriteLine(&quot;Can't Save File: &quot; + ex.Message + &quot; &quot; + fileOut)&#xA;&#x9;&#x9;fileOut = Nothing&#xA;Finally&#xA;&#x9;&#x9;'Dispose Image&#xA;&#x9;&#x9;imgin.Dispose()&#xA;End Try" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="484,164" sap2010:WorkflowViewState.IdRef="InvokeCode_69">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="ui:Image" x:Key="imgIn">[imageInput]</InArgument>
                                        <InOutArgument x:TypeArguments="x:String" x:Key="FileOut">[FilePNG]</InOutArgument>
                                        <InArgument x:TypeArguments="sd1:DataTable" x:Key="DT">[DFF]</InArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="PageWidth">[Cint(DH.Rows(0).Item("Width").ToString)]</InArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="PageHeight">[Cint(DH.Rows(0).Item("Height"))]</InArgument>
                                        <InArgument x:TypeArguments="s:String[]" x:Key="Fields">[RedactFields]</InArgument>
                                        <InArgument x:TypeArguments="ui:Image" x:Key="Logo">[Watermark]</InArgument>
                                        <InArgument x:TypeArguments="sd:Point" x:Key="LogoLocation">[WaterMarkLocation]</InArgument>
                                        <InArgument x:TypeArguments="sd:Color" x:Key="RedactColor">[RedactColor]</InArgument>
                                        <InArgument x:TypeArguments="x:Boolean" x:Key="HighlightOnly">[HighlightOnly]</InArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                    <ui:InvokeCode ContinueOnError="{x:Null}" Code="' Delay&#xA;Dim i As Int32&#xA;&#xA;'For i = 1 To 5&#xA;'    System.Threading.Thread.Sleep(100)&#xA;'&#x9;console.WriteLine(i.ToString)&#xA;    'Application.DoEvents()&#xA;'Next&#xA;&#xA;Dim sw As New Stopwatch&#xA;sw.Start()&#xA;Do While sw.ElapsedMilliseconds &lt; interval&#xA;    ' Allows UI to remain responsive&#xA;    Application.DoEvents()&#xA;Loop&#xA;sw.Stop()&#xA;&#xA;'console.WriteLine(&quot;Contine&quot;)&#xA;&#xA;If Not IsNothing(fileout) Then&#xA;&#x9;If file.Exists(fileout) Then&#xA;&#x9;&#x9;files.Add(fileOut)&#xA;&#x9;End If&#xA;End If&#xA;&#xA;Try&#xA;imgin.Dispose()&#xA;Catch ex As Exception&#xA;&#x9;'console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Close Image / Add to List" sap:VirtualizedContainerService.HintSize="484,164" sap2010:WorkflowViewState.IdRef="InvokeCode_70">
                                      <ui:InvokeCode.Arguments>
                                        <InArgument x:TypeArguments="x:String" x:Key="fileout">[FilePNG]</InArgument>
                                        <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="files">[OutputFiles]</InOutArgument>
                                        <OutArgument x:TypeArguments="ui:Image" x:Key="imgin">[imageInput]</OutArgument>
                                        <InArgument x:TypeArguments="x:Int32" x:Key="interval">500</InArgument>
                                      </ui:InvokeCode.Arguments>
                                      <sap:WorkflowViewStateService.ViewState>
                                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                        </scg:Dictionary>
                                      </sap:WorkflowViewStateService.ViewState>
                                    </ui:InvokeCode>
                                  </Sequence>
                                </ActivityAction>
                              </ui:ForEach.Body>
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                  <x:Boolean x:Key="IsPinned">False</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:ForEach>
                          </Sequence>
                        </Sequence>
                      </TryCatch.Try>
                      <TryCatch.Catches>
                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="650,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ActivityAction x:TypeArguments="s:Exception">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                            </ActivityAction.Argument>
                            <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_26" Level="Error" Message="[&quot;Redaction Failed&quot;]">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                            </ui:LogMessage>
                          </ActivityAction>
                        </Catch>
                      </TryCatch.Catches>
                    </TryCatch>
                  </Sequence>
                </If.Then>
                <If.Else>
                  <Sequence sap2010:WorkflowViewState.IdRef="Sequence_47">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                  </Sequence>
                </If.Else>
              </If>
              <FlowStep.Next>
                <FlowStep x:Name="__ReferenceID4">
                  <sap:WorkflowViewStateService.ViewState>
                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                      <av:Point x:Key="ShapeLocation">450,838.08</av:Point>
                      <av:Size x:Key="ShapeSize">200,51</av:Size>
                      <av:PointCollection x:Key="ConnectorLocation">550,890.08 550,940.08</av:PointCollection>
                    </scg:Dictionary>
                  </sap:WorkflowViewStateService.ViewState>
                  <If Condition="[isnothing(WatermarkFile)  ORELSE NOT system.io.file.Exists(WatermarkFile)]" DisplayName="Watermark" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="If_21">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <If.Then>
                      <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;' Delay&#xA;Dim i As Int32&#xA;Dim files As String()&#xA;&#xA;Try&#x9;&#xA;&#x9;files = directory.GetFiles(pathWork,&quot;*.png&quot;)&#xA;&#x9;For Each filename As String In files&#xA;&#x9;&#x9;'console.WriteLine(&quot;Moving: &quot;+filename)&#xA;&#x9;&#x9;system.io.File.Move(filename, pathRedacted+system.io.path.GetFileName(Filename))&#xA;&#x9;Next&#x9;&#xA;Catch ex As Exception&#xA;&#x9;console.WriteLine(ex.Message)&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Move Work to Redacted" sap:VirtualizedContainerService.HintSize="334,164" sap2010:WorkflowViewState.IdRef="InvokeCode_65">
                        <ui:InvokeCode.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="pathRedacted">[pathRedacted]</InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="PathTemp">[pathTemp]</InArgument>
                        </ui:InvokeCode.Arguments>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:InvokeCode>
                    </If.Then>
                    <If.Else>
                      <Sequence DisplayName="Watermarking" sap:VirtualizedContainerService.HintSize="526,779" sap2010:WorkflowViewState.IdRef="Sequence_44">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[Not Silent ANDALSO Not IsNothing(watermarkfile) ANDALSO system.io.File.Exists(WatermarkFile)]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="484,560" sap2010:WorkflowViewState.IdRef="If_22">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="376,383" sap2010:WorkflowViewState.IdRef="Sequence_43">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_45">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">0.9</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_46">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["Applying Watermark "+(percent *100).ToString+"%"]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_23" Message="[statusMessage]" />
                            </Sequence>
                          </If.Then>
                        </If>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Add Watermark workflow" sap:VirtualizedContainerService.HintSize="484,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_20" UnSafe="False" WorkflowFileName="X Add Watermark.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="WatermarkFile">[WaterMarkFile]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="InputFile" />
                            <InArgument x:TypeArguments="x:String" x:Key="OutputFile" />
                            <InArgument x:TypeArguments="sd:Point" x:Key="WatermarkPosition">[WaterMarkLocation]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="InputFolder">[PathWorking]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="OutputFolder">[pathRedacted]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                      </Sequence>
                    </If.Else>
                  </If>
                  <FlowStep.Next>
                    <FlowStep x:Name="__ReferenceID3">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <av:Point x:Key="ShapeLocation">450,940.08</av:Point>
                          <av:Size x:Key="ShapeSize">200,66</av:Size>
                          <av:PointCollection x:Key="ConnectorLocation">550,1006.08 550,1058.08</av:PointCollection>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <Sequence DisplayName="Export to PDF" sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_40">
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                            <x:Boolean x:Key="IsPinned">False</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                        <If Condition="[Not Silent]" DisplayName="Status Message" sap:VirtualizedContainerService.HintSize="484,560" sap2010:WorkflowViewState.IdRef="If_19">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <If.Then>
                            <Sequence sap:VirtualizedContainerService.HintSize="376,383" sap2010:WorkflowViewState.IdRef="Sequence_39">
                              <sap:WorkflowViewStateService.ViewState>
                                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                </scg:Dictionary>
                              </sap:WorkflowViewStateService.ViewState>
                              <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_41">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:Double">[percent]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:Double">0.99</InArgument>
                                </Assign.Value>
                              </Assign>
                              <Assign sap:VirtualizedContainerService.HintSize="334,60" sap2010:WorkflowViewState.IdRef="Assign_42">
                                <Assign.To>
                                  <OutArgument x:TypeArguments="x:String">[statusMessage]</OutArgument>
                                </Assign.To>
                                <Assign.Value>
                                  <InArgument x:TypeArguments="x:String">["Saving the PDF in Progress..... " + (percent*100).ToString+"%"]</InArgument>
                                </Assign.Value>
                              </Assign>
                              <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="334,91" sap2010:WorkflowViewState.IdRef="LogMessage_21" Message="[statusMessage]" />
                            </Sequence>
                          </If.Then>
                        </If>
                        <ui:InvokeWorkflowFile ContinueOnError="{x:Null}" DisplayName="Export Images to PDF" sap:VirtualizedContainerService.HintSize="484,87" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_16" UnSafe="False" WorkflowFileName="X Int Images to PDF.xaml">
                          <ui:InvokeWorkflowFile.Arguments>
                            <InArgument x:TypeArguments="x:String" x:Key="Folder">[pathRedacted]</InArgument>
                            <InArgument x:TypeArguments="x:String" x:Key="FileOut">[FileOutput]</InArgument>
                            <InArgument x:TypeArguments="x:Double" x:Key="Resolution">72</InArgument>
                            <InArgument x:TypeArguments="p1:Document" x:Key="DOM">[DocumentObjectModel]</InArgument>
                          </ui:InvokeWorkflowFile.Arguments>
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                        </ui:InvokeWorkflowFile>
                      </Sequence>
                      <FlowStep.Next>
                        <FlowStep x:Name="__ReferenceID2">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <av:Point x:Key="ShapeLocation">450,1058.08</av:Point>
                              <av:Size x:Key="ShapeSize">200,51</av:Size>
                              <av:PointCollection x:Key="ConnectorLocation">550,1110.08 550,1160.08</av:PointCollection>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:InvokeCode ContinueOnError="{x:Null}" Code="&#xA;return&#xA;&#xA;Try&#xA;&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;Try&#xA;&#x9;system.IO.Directory.Delete(pathStrip,True)&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try&#xA;&#xA;Try&#xA;&#x9;system.IO.Directory.Delete(pathWork,True)&#xA;Catch ex As Exception&#xA;&#x9;&#xA;Finally&#xA;&#x9;&#xA;End Try" DisplayName="Clear Temporary Files" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_61">
                            <ui:InvokeCode.Arguments>
                              <InOutArgument x:TypeArguments="swf:Form" x:Key="frm">[Frm]</InOutArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="pathStrip">[PathStripped]</InArgument>
                              <InArgument x:TypeArguments="x:String" x:Key="pathWork">[PathWorking]</InArgument>
                            </ui:InvokeCode.Arguments>
                            <sap:WorkflowViewStateService.ViewState>
                              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                                <x:Boolean x:Key="IsPinned">False</x:Boolean>
                              </scg:Dictionary>
                            </sap:WorkflowViewStateService.ViewState>
                          </ui:InvokeCode>
                          <FlowStep.Next>
                            <x:Reference>__ReferenceID0</x:Reference>
                          </FlowStep.Next>
                        </FlowStep>
                      </FlowStep.Next>
                    </FlowStep>
                  </FlowStep.Next>
                </FlowStep>
              </FlowStep.Next>
            </FlowStep>
          </FlowStep.Next>
        </FlowStep>
      </FlowStep.Next>
    </FlowStep>
    <x:Reference>__ReferenceID1</x:Reference>
    <x:Reference>__ReferenceID2</x:Reference>
    <x:Reference>__ReferenceID3</x:Reference>
    <x:Reference>__ReferenceID4</x:Reference>
    <FlowStep x:Name="__ReferenceID6">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">450,413</av:Point>
          <av:Size x:Key="ShapeSize">200,66</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">550,479 550,516.08</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <Sequence sap:VirtualizedContainerService.HintSize="200,66" sap2010:WorkflowViewState.IdRef="Sequence_45">
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
        <If Condition="[IsNothing(redactColor) ORELSE RedactColor.IsEmpty OR NOT RedactColor.IsKnownColor]" sap:VirtualizedContainerService.HintSize="484,247" sap2010:WorkflowViewState.IdRef="If_23">
          <If.Then>
            <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_47">
              <Assign.To>
                <OutArgument x:TypeArguments="sd:Color">[RedactColor]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="sd:Color">[system.Drawing.Color.Black]</InArgument>
              </Assign.Value>
            </Assign>
          </If.Then>
        </If>
      </Sequence>
      <FlowStep.Next>
        <x:Reference>__ReferenceID5</x:Reference>
      </FlowStep.Next>
    </FlowStep>
    <FlowDecision x:Name="__ReferenceID9" Condition="[BoolFiles]" DisplayName="Flow Decision" sap:VirtualizedContainerService.HintSize="79,87" sap2010:WorkflowViewState.IdRef="FlowDecision_13" True="{x:Reference __ReferenceID6}">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <av:Point x:Key="ShapeLocation">790.5,306.5</av:Point>
          <av:Size x:Key="ShapeSize">79,87</av:Size>
          <av:PointCollection x:Key="FalseConnector">869.5,350 1030,350 1030,514</av:PointCollection>
          <av:PointCollection x:Key="TrueConnector">790.5,350 550,350 550,413</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <FlowDecision.False>
        <FlowStep x:Name="__ReferenceID7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <av:Point x:Key="ShapeLocation">930,514</av:Point>
              <av:Size x:Key="ShapeSize">200,51</av:Size>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="LogMessage_24" Level="Error" Message="[&quot;Warning: Exiting / Process Cancelled&quot;]" />
        </FlowStep>
      </FlowDecision.False>
    </FlowDecision>
    <x:Reference>__ReferenceID7</x:Reference>
    <x:Reference>__ReferenceID8</x:Reference>
    <FlowStep x:Name="__ReferenceID10">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <av:Point x:Key="ShapeLocation">730,194.02</av:Point>
          <av:Size x:Key="ShapeSize">200,51</av:Size>
          <av:PointCollection x:Key="ConnectorLocation">830,245.02 830,306.5</av:PointCollection>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <ui:InvokeCode ContinueOnError="{x:Null}" Code="If IsNothing(FileINput) OrElse Not system.io.Path.IsPathRooted(FileInput) OrElse Not system.io.file.Exists(FileInput) Then&#xA;&#x9;console.WriteLine(&quot;Error: Input File Not Found! Please provide a fully rooted path for the FileInput argument&quot;)&#xA;&#x9;If Not IsNothing(FileINput) Then console.WriteLine(Fileinput)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;If IsNothing(FileOutput) OrElse Not system.io.Path.IsPathRooted(FileOutput)  OrElse Not system.io.Directory.Exists(system.io.path.GetDirectoryName(FileOutput)) Then&#xA;&#x9;console.WriteLine(&quot;Error: FileOutput argument must be a fully rooted path.&quot;)&#xA;&#x9;If Not IsNothing(FileOutput) Then console.WriteLine(FileOutput)&#xA;&#x9;Return&#xA;End If&#xA;&#xA;boolOK = True" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="200,51" sap2010:WorkflowViewState.IdRef="InvokeCode_71">
        <ui:InvokeCode.Arguments>
          <OutArgument x:TypeArguments="x:Boolean" x:Key="boolOK">[BoolFiles]</OutArgument>
          <InArgument x:TypeArguments="x:String" x:Key="FileINput">[FileInput]</InArgument>
          <InArgument x:TypeArguments="x:String" x:Key="FileOutput">[FileOutput]</InArgument>
        </ui:InvokeCode.Arguments>
        <sap:WorkflowViewStateService.ViewState>
          <scg:Dictionary x:TypeArguments="x:String, x:Object">
            <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          </scg:Dictionary>
        </sap:WorkflowViewStateService.ViewState>
      </ui:InvokeCode>
      <FlowStep.Next>
        <x:Reference>__ReferenceID9</x:Reference>
      </FlowStep.Next>
    </FlowStep>
  </Flowchart>
</Activity>